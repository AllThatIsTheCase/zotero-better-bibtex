BibTeX = (function() {
  /*
   * Generated by PEG.js 0.8.0.
   *
   * http://pegjs.majda.cz/
   */

  function peg$subclass(child, parent) {
    function ctor() { this.constructor = child; }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
  }

  function SyntaxError(message, expected, found, offset, line, column) {
    this.message  = message;
    this.expected = expected;
    this.found    = found;
    this.offset   = offset;
    this.line     = line;
    this.column   = column;

    this.name     = "SyntaxError";
  }

  peg$subclass(SyntaxError, Error);

  function parse(input) {
    var options = arguments.length > 1 ? arguments[1] : {},

        peg$FAILED = {},

        peg$startRuleFunctions = { start: peg$parsestart },
        peg$startRuleFunction  = peg$parsestart,

        peg$c0 = [],
        peg$c1 = function(entries) { return bibtex; },
        peg$c2 = peg$FAILED,
        peg$c3 = "@comment",
        peg$c4 = { type: "literal", value: "@comment", description: "\"@comment\"" },
        peg$c5 = "{",
        peg$c6 = { type: "literal", value: "{", description: "\"{\"" },
        peg$c7 = "}",
        peg$c8 = { type: "literal", value: "}", description: "\"}\"" },
        peg$c9 = function(comment) { bibtex.comments.push(flatten(comment).trim()); },
        peg$c10 = "@string",
        peg$c11 = { type: "literal", value: "@string", description: "\"@string\"" },
        peg$c12 = function(str) { bibtex.strings[str.key] = str.value; },
        peg$c13 = "@",
        peg$c14 = { type: "literal", value: "@", description: "\"@\"" },
        peg$c15 = void 0,
        peg$c16 = "string",
        peg$c17 = { type: "literal", value: "string", description: "\"string\"" },
        peg$c18 = "comment",
        peg$c19 = { type: "literal", value: "comment", description: "\"comment\"" },
        peg$c20 = /^[^@]/,
        peg$c21 = { type: "class", value: "[^@]", description: "[^@]" },
        peg$c22 = function(other) { bibtex.comments.push(flatten(other).trim()); },
        peg$c23 = ",",
        peg$c24 = { type: "literal", value: ",", description: "\",\"" },
        peg$c25 = function(type, id, fields) {
              if (fields.length == 0) {
                error('@' + type + '{' + id + ',}');
              } else {
                var ref = Dict({'__type__': type.toLowerCase(), '__key__': id});
                fields.forEach(function(field) {
                  if (field.value && field.value != '') {
                    switch (field.type) {
                      case 'file':
                        var attachments;
                        if (ref['file']) {
                          attachments = ref['file'];
                        } else {
                          attachments = [];
                        }
                        ref['file'] = attachments.concat(field.value);
                        break;

                      case 'creator':
                        if (field.value.length > 0) {
                          ref[field.key] = field.value;
                        }
                        break;

                      default:
                        if (ref[field.key]) { // duplicate fields are not supposed to occur I think
                          var note;
                          if (ref['__note__']) {
                            note = ref['__note__'] + "<br/>\n";
                          } else {
                            note = '';
                          }
                          ref['__note__'] = note + field.key + '=' + field.value;
                        } else {
                          ref[field.key] = field.value;
                        }
                        break;
                    }
                  }
                });
                bibtex.references.push(ref);
              }
            },
        peg$c26 = function(err) { error('@' + flatten(err)); },
        peg$c27 = /^[a-zA-Z]/,
        peg$c28 = { type: "class", value: "[a-zA-Z]", description: "[a-zA-Z]" },
        peg$c29 = function(chars) { return flatten(chars); },
        peg$c30 = /^[^,]/,
        peg$c31 = { type: "class", value: "[^,]", description: "[^,]" },
        peg$c32 = function(str) { return flatten(str); },
        peg$c33 = "=",
        peg$c34 = { type: "literal", value: "=", description: "\"=\"" },
        peg$c35 = null,
        peg$c36 = function(key, val) { return {key: 'file', type: 'file', value: filterattachments(val || [], key)}; },
        peg$c37 = function(key, val) {
              var _dbg = 'PARSING: ';
              val.forEach(function(fragment) {
                if (fragment instanceof String) {
                  _dbg += '<<' + fragment + '>>';
                } else {
                  _dbg += fragment;
                }
              });
              Zotero.debug(_dbg);
              return {key: key, type: 'creator', value: Creators.parse(val)};
            },
        peg$c38 = "sentelink",
        peg$c39 = { type: "literal", value: "sentelink", description: "\"sentelink\"" },
        peg$c40 = "file",
        peg$c41 = { type: "literal", value: "file", description: "\"file\"" },
        peg$c42 = "pdf",
        peg$c43 = { type: "literal", value: "pdf", description: "\"pdf\"" },
        peg$c44 = "path",
        peg$c45 = { type: "literal", value: "path", description: "\"path\"" },
        peg$c46 = "author",
        peg$c47 = { type: "literal", value: "author", description: "\"author\"" },
        peg$c48 = "editor",
        peg$c49 = { type: "literal", value: "editor", description: "\"editor\"" },
        peg$c50 = "translator",
        peg$c51 = { type: "literal", value: "translator", description: "\"translator\"" },
        peg$c52 = function(val) { return val; },
        peg$c53 = "\"",
        peg$c54 = { type: "literal", value: "\"", description: "\"\\\"\"" },
        peg$c55 = function(key) { return key == 'url'},
        peg$c56 = function(key, val) { return {key: key.trim().toLowerCase(), value: val.trim()}; },
        peg$c57 = /^[^ \t\n\r=]/,
        peg$c58 = { type: "class", value: "[^ \\t\\n\\r=]", description: "[^ \\t\\n\\r=]" },
        peg$c59 = function(key) { return flatten(key); },
        peg$c60 = /^[^#"{} \t\n\r,]/,
        peg$c61 = { type: "class", value: "[^#\"{} \\t\\n\\r,]", description: "[^#\"{} \\t\\n\\r,]" },
        peg$c62 = function(val) {
              val = flatten(val);
              return (bibtex.strings[val] || val);
            },
        peg$c63 = function(val) { return flatten(val); },
        peg$c64 = "#",
        peg$c65 = { type: "literal", value: "#", description: "\"#\"" },
        peg$c66 = function() { delete bibtex.quote; return true; },
        peg$c67 = function(val) { delete bibtex.quote; return true; },
        peg$c68 = function() { bibtex.quote = '"'; return true; },
        peg$c69 = function(text) { return text; },
        peg$c70 = "\\\\",
        peg$c71 = { type: "literal", value: "\\\\", description: "\"\\\\\\\\\"" },
        peg$c72 = function() { return "\n"; },
        peg$c73 = "\\",
        peg$c74 = { type: "literal", value: "\\", description: "\"\\\\\"" },
        peg$c75 = /^[~]/,
        peg$c76 = { type: "class", value: "[~]", description: "[~]" },
        peg$c77 = function(text) { return ' '; },
        peg$c78 = /^[#$&]/,
        peg$c79 = { type: "class", value: "[#$&]", description: "[#$&]" },
        peg$c80 = function() { return ''; },
        peg$c81 = "_",
        peg$c82 = { type: "literal", value: "_", description: "\"_\"" },
        peg$c83 = function(text) { return '<sub>' + text + '</sub>'; },
        peg$c84 = "^",
        peg$c85 = { type: "literal", value: "^", description: "\"^\"" },
        peg$c86 = function(text) { return '<sup>' + text + '</sup>'; },
        peg$c87 = "\\emph",
        peg$c88 = { type: "literal", value: "\\emph", description: "\"\\\\emph\"" },
        peg$c89 = function(text) { return '<i>' + text + '</i>'; },
        peg$c90 = "\\url{",
        peg$c91 = { type: "literal", value: "\\url{", description: "\"\\\\url{\"" },
        peg$c92 = function(text) { return flatten(text); },
        peg$c93 = "\\textit",
        peg$c94 = { type: "literal", value: "\\textit", description: "\"\\\\textit\"" },
        peg$c95 = "\\textbf",
        peg$c96 = { type: "literal", value: "\\textbf", description: "\"\\\\textbf\"" },
        peg$c97 = function(text) { return '<b>' + text + '</b>'; },
        peg$c98 = "\\textsc",
        peg$c99 = { type: "literal", value: "\\textsc", description: "\"\\\\textsc\"" },
        peg$c100 = function(text) { return '<span style="small-caps">' + text + '</span>'; },
        peg$c101 = function(text) { return new String(flatten(text)); },
        peg$c102 = "$",
        peg$c103 = { type: "literal", value: "$", description: "\"$\"" },
        peg$c104 = "%",
        peg$c105 = { type: "literal", value: "%", description: "\"%\"" },
        peg$c106 = /^[^\n]/,
        peg$c107 = { type: "class", value: "[^\\n]", description: "[^\\n]" },
        peg$c108 = "\n",
        peg$c109 = { type: "literal", value: "\n", description: "\"\\n\"" },
        peg$c110 = /^[^a-z]/,
        peg$c111 = { type: "class", value: "[^a-z]", description: "[^a-z]" },
        peg$c112 = "[",
        peg$c113 = { type: "literal", value: "[", description: "\"[\"" },
        peg$c114 = "]",
        peg$c115 = { type: "literal", value: "]", description: "\"]\"" },
        peg$c116 = function(cmd, param) {  /* single-char command */
                                                                  var cmds = ["\\" + cmd + param];
                                                                  if (param.length == 1) { cmds.push("\\" + cmd + '{' + param + '}'); }
                                                                  if (param.length == 3 && param[0] == '{' && param[2] == '}') { cmds.push("\\" + cmd + param[2] ); }
                                                                  var match = null;
                                                                  cmds.forEach(function(cmd) {
                                                                    match = match || LaTeX.toUnicode[cmd];
                                                                  });
                                                                  return (match || param);
                                                               },
        peg$c117 = function(cmd) {  /* single-char command without parameter*/
                                                                  if (LaTeX.toUnicode["\\" + cmd]) { return LaTeX.toUnicode["\\" + cmd]; }
                                                                  return cmd;
                                                               },
        peg$c118 = function(cmd, text) { /* command */
                                                                            return ((LaTeX.toUnicode["\\" + cmd] || '') + flatten(text));
                                                                          },
        peg$c119 = function(cmd) {  /* bare command */
                                                                  if (LaTeX.toUnicode["\\" + cmd]) { return LaTeX.toUnicode["\\" + cmd]; }
                                                                  return cmd;
                                                               },
        peg$c120 = /^[^\\{]/,
        peg$c121 = { type: "class", value: "[^\\\\{]", description: "[^\\\\{]" },
        peg$c122 = { type: "any", description: "any character" },
        peg$c123 = function() { return (bibtex.quote == '"');  },
        peg$c124 = function() { return '"'; },
        peg$c125 = /^[#$%&_\^[\]{}]/,
        peg$c126 = { type: "class", value: "[#$%&_\\^[\\]{}]", description: "[#$%&_\\^[\\]{}]" },
        peg$c127 = /^[^\\{}]/,
        peg$c128 = { type: "class", value: "[^\\\\{}]", description: "[^\\\\{}]" },
        peg$c129 = function() { return (bibtex.quote == '"'); },
        peg$c130 = /^[^ "\t\n\r#$%&~_\^{}[\]\\]/,
        peg$c131 = { type: "class", value: "[^ \"\\t\\n\\r#$%&~_\\^{}[\\]\\\\]", description: "[^ \"\\t\\n\\r#$%&~_\\^{}[\\]\\\\]" },
        peg$c132 = function() { return (bibtex.quote != '"'); },
        peg$c133 = /^[^ \t\n\r#$%&~_\^{}[\]\\]/,
        peg$c134 = { type: "class", value: "[^ \\t\\n\\r#$%&~_\\^{}[\\]\\\\]", description: "[^ \\t\\n\\r#$%&~_\\^{}[\\]\\\\]" },
        peg$c135 = /^[ \t\n\r]/,
        peg$c136 = { type: "class", value: "[ \\t\\n\\r]", description: "[ \\t\\n\\r]" },
        peg$c137 = function(car, cdr) { return [car].concat(cdr || []); },
        peg$c138 = ";",
        peg$c139 = { type: "literal", value: ";", description: "\";\"" },
        peg$c140 = function(att) { return att; },
        peg$c141 = function(parts) {
                                parts = parts || [];
                                parts = (parts || []).map(function(v) { return v.trim(); });
                                switch (parts.length) {
                                  case 0:
                                    return {};
                                  case 1:
                                    parts = {title: '', path: parts[0], mimeType: ''};
                                    break;
                                  case 2:
                                    parts = {title: parts[0], path: parts[1], mimeType: ''};
                                    break;
                                  default:
                                    parts = {title: parts[0], path: parts[1], mimeType: parts[2]};
                                    break;
                                }

                                parts.title = ((parts.title && parts.title != '') ? parts.title : 'Attachment');
                                parts.mimeType = ((parts.mimeType && parts.mimeType.match(/pdf/i)) ? 'application/pdf' : null);

                                parts.path = parts.path.replace(/\\/g, '/');
                                if (parts.path.match(/^[a-z]:\//i)) { parts.path = 'file:///' + parts.path; }
                                if (parts.path.match(/^\/\//)) { parts.path = 'file:' + parts.path; }

                                return parts;
                            },
        peg$c142 = ":",
        peg$c143 = { type: "literal", value: ":", description: "\":\"" },
        peg$c144 = function(part) { return part; },
        peg$c145 = function(part) { return (part || ''); },
        peg$c146 = /^[^\\{}:;]/,
        peg$c147 = { type: "class", value: "[^\\\\{}:;]", description: "[^\\\\{}:;]" },

        peg$currPos          = 0,
        peg$reportedPos      = 0,
        peg$cachedPos        = 0,
        peg$cachedPosDetails = { line: 1, column: 1, seenCR: false },
        peg$maxFailPos       = 0,
        peg$maxFailExpected  = [],
        peg$silentFails      = 0,

        peg$result;

    if ("startRule" in options) {
      if (!(options.startRule in peg$startRuleFunctions)) {
        throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
      }

      peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
    }

    function text() {
      return input.substring(peg$reportedPos, peg$currPos);
    }

    function offset() {
      return peg$reportedPos;
    }

    function line() {
      return peg$computePosDetails(peg$reportedPos).line;
    }

    function column() {
      return peg$computePosDetails(peg$reportedPos).column;
    }

    function expected(description) {
      throw peg$buildException(
        null,
        [{ type: "other", description: description }],
        peg$reportedPos
      );
    }

    function error(message) {
      throw peg$buildException(message, null, peg$reportedPos);
    }

    function peg$computePosDetails(pos) {
      function advance(details, startPos, endPos) {
        var p, ch;

        for (p = startPos; p < endPos; p++) {
          ch = input.charAt(p);
          if (ch === "\n") {
            if (!details.seenCR) { details.line++; }
            details.column = 1;
            details.seenCR = false;
          } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
            details.line++;
            details.column = 1;
            details.seenCR = true;
          } else {
            details.column++;
            details.seenCR = false;
          }
        }
      }

      if (peg$cachedPos !== pos) {
        if (peg$cachedPos > pos) {
          peg$cachedPos = 0;
          peg$cachedPosDetails = { line: 1, column: 1, seenCR: false };
        }
        advance(peg$cachedPosDetails, peg$cachedPos, pos);
        peg$cachedPos = pos;
      }

      return peg$cachedPosDetails;
    }

    function peg$fail(expected) {
      if (peg$currPos < peg$maxFailPos) { return; }

      if (peg$currPos > peg$maxFailPos) {
        peg$maxFailPos = peg$currPos;
        peg$maxFailExpected = [];
      }

      peg$maxFailExpected.push(expected);
    }

    function peg$buildException(message, expected, pos) {
      function cleanupExpected(expected) {
        var i = 1;

        expected.sort(function(a, b) {
          if (a.description < b.description) {
            return -1;
          } else if (a.description > b.description) {
            return 1;
          } else {
            return 0;
          }
        });

        while (i < expected.length) {
          if (expected[i - 1] === expected[i]) {
            expected.splice(i, 1);
          } else {
            i++;
          }
        }
      }

      function buildMessage(expected, found) {
        function stringEscape(s) {
          function hex(ch) { return ch.charCodeAt(0).toString(16).toUpperCase(); }

          return s
            .replace(/\\/g,   '\\\\')
            .replace(/"/g,    '\\"')
            .replace(/\x08/g, '\\b')
            .replace(/\t/g,   '\\t')
            .replace(/\n/g,   '\\n')
            .replace(/\f/g,   '\\f')
            .replace(/\r/g,   '\\r')
            .replace(/[\x00-\x07\x0B\x0E\x0F]/g, function(ch) { return '\\x0' + hex(ch); })
            .replace(/[\x10-\x1F\x80-\xFF]/g,    function(ch) { return '\\x'  + hex(ch); })
            .replace(/[\u0180-\u0FFF]/g,         function(ch) { return '\\u0' + hex(ch); })
            .replace(/[\u1080-\uFFFF]/g,         function(ch) { return '\\u'  + hex(ch); });
        }

        var expectedDescs = new Array(expected.length),
            expectedDesc, foundDesc, i;

        for (i = 0; i < expected.length; i++) {
          expectedDescs[i] = expected[i].description;
        }

        expectedDesc = expected.length > 1
          ? expectedDescs.slice(0, -1).join(", ")
              + " or "
              + expectedDescs[expected.length - 1]
          : expectedDescs[0];

        foundDesc = found ? "\"" + stringEscape(found) + "\"" : "end of input";

        return "Expected " + expectedDesc + " but " + foundDesc + " found.";
      }

      var posDetails = peg$computePosDetails(pos),
          found      = pos < input.length ? input.charAt(pos) : null;

      if (expected !== null) {
        cleanupExpected(expected);
      }

      return new SyntaxError(
        message !== null ? message : buildMessage(expected, found),
        expected,
        found,
        pos,
        posDetails.line,
        posDetails.column
      );
    }

    function peg$parsestart() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parseentry();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parseentry();
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c1(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseentry() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parse_();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parse_();
      }
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 8) === peg$c3) {
          s2 = peg$c3;
          peg$currPos += 8;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c4); }
        }
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$parse_();
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$parse_();
          }
          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 123) {
              s4 = peg$c5;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c6); }
            }
            if (s4 !== peg$FAILED) {
              s5 = [];
              s6 = peg$parsestring();
              while (s6 !== peg$FAILED) {
                s5.push(s6);
                s6 = peg$parsestring();
              }
              if (s5 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 125) {
                  s6 = peg$c7;
                  peg$currPos++;
                } else {
                  s6 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c8); }
                }
                if (s6 !== peg$FAILED) {
                  peg$reportedPos = s0;
                  s1 = peg$c9(s5);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c2;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c2;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c2;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c2;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c2;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c2;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = [];
        s2 = peg$parse_();
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          s2 = peg$parse_();
        }
        if (s1 !== peg$FAILED) {
          if (input.substr(peg$currPos, 7) === peg$c10) {
            s2 = peg$c10;
            peg$currPos += 7;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c11); }
          }
          if (s2 !== peg$FAILED) {
            s3 = [];
            s4 = peg$parse_();
            while (s4 !== peg$FAILED) {
              s3.push(s4);
              s4 = peg$parse_();
            }
            if (s3 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 123) {
                s4 = peg$c5;
                peg$currPos++;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c6); }
              }
              if (s4 !== peg$FAILED) {
                s5 = [];
                s6 = peg$parse_();
                while (s6 !== peg$FAILED) {
                  s5.push(s6);
                  s6 = peg$parse_();
                }
                if (s5 !== peg$FAILED) {
                  s6 = peg$parsekey_value();
                  if (s6 !== peg$FAILED) {
                    s7 = [];
                    s8 = peg$parse_();
                    while (s8 !== peg$FAILED) {
                      s7.push(s8);
                      s8 = peg$parse_();
                    }
                    if (s7 !== peg$FAILED) {
                      if (input.charCodeAt(peg$currPos) === 125) {
                        s8 = peg$c7;
                        peg$currPos++;
                      } else {
                        s8 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c8); }
                      }
                      if (s8 !== peg$FAILED) {
                        peg$reportedPos = s0;
                        s1 = peg$c12(s6);
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c2;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c2;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c2;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c2;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c2;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c2;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c2;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c2;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = [];
          s2 = peg$parse_();
          while (s2 !== peg$FAILED) {
            s1.push(s2);
            s2 = peg$parse_();
          }
          if (s1 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 64) {
              s2 = peg$c13;
              peg$currPos++;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c14); }
            }
            if (s2 !== peg$FAILED) {
              s3 = peg$currPos;
              peg$silentFails++;
              if (input.substr(peg$currPos, 6) === peg$c16) {
                s4 = peg$c16;
                peg$currPos += 6;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c17); }
              }
              if (s4 === peg$FAILED) {
                if (input.substr(peg$currPos, 7) === peg$c18) {
                  s4 = peg$c18;
                  peg$currPos += 7;
                } else {
                  s4 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c19); }
                }
              }
              peg$silentFails--;
              if (s4 === peg$FAILED) {
                s3 = peg$c15;
              } else {
                peg$currPos = s3;
                s3 = peg$c2;
              }
              if (s3 !== peg$FAILED) {
                s4 = peg$parsereference();
                if (s4 !== peg$FAILED) {
                  s1 = [s1, s2, s3, s4];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c2;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c2;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c2;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c2;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = [];
            if (peg$c20.test(input.charAt(peg$currPos))) {
              s2 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c21); }
            }
            if (s2 !== peg$FAILED) {
              while (s2 !== peg$FAILED) {
                s1.push(s2);
                if (peg$c20.test(input.charAt(peg$currPos))) {
                  s2 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s2 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c21); }
                }
              }
            } else {
              s1 = peg$c2;
            }
            if (s1 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c22(s1);
            }
            s0 = s1;
          }
        }
      }

      return s0;
    }

    function peg$parsereference() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

      s0 = peg$currPos;
      s1 = peg$parseidentifier();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parse_();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parse_();
        }
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 123) {
            s3 = peg$c5;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c6); }
          }
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$parse_();
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parse_();
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parsecitekey();
              if (s5 !== peg$FAILED) {
                s6 = [];
                s7 = peg$parse_();
                while (s7 !== peg$FAILED) {
                  s6.push(s7);
                  s7 = peg$parse_();
                }
                if (s6 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 44) {
                    s7 = peg$c23;
                    peg$currPos++;
                  } else {
                    s7 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c24); }
                  }
                  if (s7 !== peg$FAILED) {
                    s8 = [];
                    s9 = peg$parsefield();
                    while (s9 !== peg$FAILED) {
                      s8.push(s9);
                      s9 = peg$parsefield();
                    }
                    if (s8 !== peg$FAILED) {
                      if (input.charCodeAt(peg$currPos) === 125) {
                        s9 = peg$c7;
                        peg$currPos++;
                      } else {
                        s9 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c8); }
                      }
                      if (s9 !== peg$FAILED) {
                        s10 = [];
                        s11 = peg$parse_();
                        while (s11 !== peg$FAILED) {
                          s10.push(s11);
                          s11 = peg$parse_();
                        }
                        if (s10 !== peg$FAILED) {
                          peg$reportedPos = s0;
                          s1 = peg$c25(s1, s5, s8);
                          s0 = s1;
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c2;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c2;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c2;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c2;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c2;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c2;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c2;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c2;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c2;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c2;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = [];
        if (peg$c20.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c21); }
        }
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          if (peg$c20.test(input.charAt(peg$currPos))) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c21); }
          }
        }
        if (s1 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c26(s1);
        }
        s0 = s1;
      }

      return s0;
    }

    function peg$parseidentifier() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = [];
      if (peg$c27.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c28); }
      }
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          if (peg$c27.test(input.charAt(peg$currPos))) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c28); }
          }
        }
      } else {
        s1 = peg$c2;
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c29(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsecitekey() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = [];
      if (peg$c30.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c31); }
      }
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          if (peg$c30.test(input.charAt(peg$currPos))) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c31); }
          }
        }
      } else {
        s1 = peg$c2;
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c32(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsefield() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parse_();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parse_();
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseattachmenttype();
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$parse_();
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$parse_();
          }
          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 61) {
              s4 = peg$c33;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c34); }
            }
            if (s4 !== peg$FAILED) {
              s5 = [];
              s6 = peg$parse_();
              while (s6 !== peg$FAILED) {
                s5.push(s6);
                s6 = peg$parse_();
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$parseattachments();
                if (s6 !== peg$FAILED) {
                  s7 = [];
                  s8 = peg$parse_();
                  while (s8 !== peg$FAILED) {
                    s7.push(s8);
                    s8 = peg$parse_();
                  }
                  if (s7 !== peg$FAILED) {
                    s8 = peg$currPos;
                    if (input.charCodeAt(peg$currPos) === 44) {
                      s9 = peg$c23;
                      peg$currPos++;
                    } else {
                      s9 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c24); }
                    }
                    if (s9 !== peg$FAILED) {
                      s10 = [];
                      s11 = peg$parse_();
                      while (s11 !== peg$FAILED) {
                        s10.push(s11);
                        s11 = peg$parse_();
                      }
                      if (s10 !== peg$FAILED) {
                        s9 = [s9, s10];
                        s8 = s9;
                      } else {
                        peg$currPos = s8;
                        s8 = peg$c2;
                      }
                    } else {
                      peg$currPos = s8;
                      s8 = peg$c2;
                    }
                    if (s8 === peg$FAILED) {
                      s8 = peg$c35;
                    }
                    if (s8 !== peg$FAILED) {
                      peg$reportedPos = s0;
                      s1 = peg$c36(s2, s6);
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c2;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c2;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c2;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c2;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c2;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c2;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c2;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c2;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = [];
        s2 = peg$parse_();
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          s2 = peg$parse_();
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parsecreatortype();
          if (s2 !== peg$FAILED) {
            s3 = [];
            s4 = peg$parse_();
            while (s4 !== peg$FAILED) {
              s3.push(s4);
              s4 = peg$parse_();
            }
            if (s3 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 61) {
                s4 = peg$c33;
                peg$currPos++;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c34); }
              }
              if (s4 !== peg$FAILED) {
                s5 = [];
                s6 = peg$parse_();
                while (s6 !== peg$FAILED) {
                  s5.push(s6);
                  s6 = peg$parse_();
                }
                if (s5 !== peg$FAILED) {
                  s6 = peg$parsebracedvalue();
                  if (s6 !== peg$FAILED) {
                    s7 = [];
                    s8 = peg$parse_();
                    while (s8 !== peg$FAILED) {
                      s7.push(s8);
                      s8 = peg$parse_();
                    }
                    if (s7 !== peg$FAILED) {
                      s8 = peg$currPos;
                      if (input.charCodeAt(peg$currPos) === 44) {
                        s9 = peg$c23;
                        peg$currPos++;
                      } else {
                        s9 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c24); }
                      }
                      if (s9 !== peg$FAILED) {
                        s10 = [];
                        s11 = peg$parse_();
                        while (s11 !== peg$FAILED) {
                          s10.push(s11);
                          s11 = peg$parse_();
                        }
                        if (s10 !== peg$FAILED) {
                          s9 = [s9, s10];
                          s8 = s9;
                        } else {
                          peg$currPos = s8;
                          s8 = peg$c2;
                        }
                      } else {
                        peg$currPos = s8;
                        s8 = peg$c2;
                      }
                      if (s8 === peg$FAILED) {
                        s8 = peg$c35;
                      }
                      if (s8 !== peg$FAILED) {
                        peg$reportedPos = s0;
                        s1 = peg$c37(s2, s6);
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c2;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c2;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c2;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c2;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c2;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c2;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c2;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c2;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$parsekey_value();
        }
      }

      return s0;
    }

    function peg$parseattachmenttype() {
      var s0;

      if (input.substr(peg$currPos, 9) === peg$c38) {
        s0 = peg$c38;
        peg$currPos += 9;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c39); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 4) === peg$c40) {
          s0 = peg$c40;
          peg$currPos += 4;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c41); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 3) === peg$c42) {
            s0 = peg$c42;
            peg$currPos += 3;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c43); }
          }
          if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 4) === peg$c44) {
              s0 = peg$c44;
              peg$currPos += 4;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c45); }
            }
          }
        }
      }

      return s0;
    }

    function peg$parsecreatortype() {
      var s0;

      if (input.substr(peg$currPos, 6) === peg$c46) {
        s0 = peg$c46;
        peg$currPos += 6;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c47); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 6) === peg$c48) {
          s0 = peg$c48;
          peg$currPos += 6;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c49); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 10) === peg$c50) {
            s0 = peg$c50;
            peg$currPos += 10;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c51); }
          }
        }
      }

      return s0;
    }

    function peg$parseattachments() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 123) {
        s1 = peg$c5;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c6); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseattachmentlist();
        if (s2 === peg$FAILED) {
          s2 = peg$c35;
        }
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 125) {
            s3 = peg$c7;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c8); }
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c52(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c2;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c2;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c2;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 34) {
          s1 = peg$c53;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c54); }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parseattachmentlist();
          if (s2 === peg$FAILED) {
            s2 = peg$c35;
          }
          if (s2 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 34) {
              s3 = peg$c53;
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c54); }
            }
            if (s3 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c52(s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c2;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c2;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c2;
        }
      }

      return s0;
    }

    function peg$parsekey_value() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parse_();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parse_();
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsekey();
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$parse_();
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$parse_();
          }
          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 61) {
              s4 = peg$c33;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c34); }
            }
            if (s4 !== peg$FAILED) {
              peg$reportedPos = peg$currPos;
              s5 = peg$c55(s2);
              if (s5) {
                s5 = peg$c15;
              } else {
                s5 = peg$c2;
              }
              if (s5 !== peg$FAILED) {
                s6 = [];
                s7 = peg$parse_();
                while (s7 !== peg$FAILED) {
                  s6.push(s7);
                  s7 = peg$parse_();
                }
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseurl();
                  if (s7 !== peg$FAILED) {
                    s8 = [];
                    s9 = peg$parse_();
                    while (s9 !== peg$FAILED) {
                      s8.push(s9);
                      s9 = peg$parse_();
                    }
                    if (s8 !== peg$FAILED) {
                      s9 = peg$currPos;
                      if (input.charCodeAt(peg$currPos) === 44) {
                        s10 = peg$c23;
                        peg$currPos++;
                      } else {
                        s10 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c24); }
                      }
                      if (s10 !== peg$FAILED) {
                        s11 = [];
                        s12 = peg$parse_();
                        while (s12 !== peg$FAILED) {
                          s11.push(s12);
                          s12 = peg$parse_();
                        }
                        if (s11 !== peg$FAILED) {
                          s10 = [s10, s11];
                          s9 = s10;
                        } else {
                          peg$currPos = s9;
                          s9 = peg$c2;
                        }
                      } else {
                        peg$currPos = s9;
                        s9 = peg$c2;
                      }
                      if (s9 === peg$FAILED) {
                        s9 = peg$c35;
                      }
                      if (s9 !== peg$FAILED) {
                        peg$reportedPos = s0;
                        s1 = peg$c56(s2, s7);
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c2;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c2;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c2;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c2;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c2;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c2;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c2;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c2;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c2;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = [];
        s2 = peg$parse_();
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          s2 = peg$parse_();
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parsekey();
          if (s2 !== peg$FAILED) {
            s3 = [];
            s4 = peg$parse_();
            while (s4 !== peg$FAILED) {
              s3.push(s4);
              s4 = peg$parse_();
            }
            if (s3 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 61) {
                s4 = peg$c33;
                peg$currPos++;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c34); }
              }
              if (s4 !== peg$FAILED) {
                s5 = [];
                s6 = peg$parse_();
                while (s6 !== peg$FAILED) {
                  s5.push(s6);
                  s6 = peg$parse_();
                }
                if (s5 !== peg$FAILED) {
                  s6 = peg$parsevalue();
                  if (s6 !== peg$FAILED) {
                    s7 = [];
                    s8 = peg$parse_();
                    while (s8 !== peg$FAILED) {
                      s7.push(s8);
                      s8 = peg$parse_();
                    }
                    if (s7 !== peg$FAILED) {
                      s8 = peg$currPos;
                      if (input.charCodeAt(peg$currPos) === 44) {
                        s9 = peg$c23;
                        peg$currPos++;
                      } else {
                        s9 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c24); }
                      }
                      if (s9 !== peg$FAILED) {
                        s10 = [];
                        s11 = peg$parse_();
                        while (s11 !== peg$FAILED) {
                          s10.push(s11);
                          s11 = peg$parse_();
                        }
                        if (s10 !== peg$FAILED) {
                          s9 = [s9, s10];
                          s8 = s9;
                        } else {
                          peg$currPos = s8;
                          s8 = peg$c2;
                        }
                      } else {
                        peg$currPos = s8;
                        s8 = peg$c2;
                      }
                      if (s8 === peg$FAILED) {
                        s8 = peg$c35;
                      }
                      if (s8 !== peg$FAILED) {
                        peg$reportedPos = s0;
                        s1 = peg$c56(s2, s6);
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c2;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c2;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c2;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c2;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c2;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c2;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c2;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c2;
        }
      }

      return s0;
    }

    function peg$parsekey() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = [];
      if (peg$c57.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c58); }
      }
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          if (peg$c57.test(input.charAt(peg$currPos))) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c58); }
          }
        }
      } else {
        s1 = peg$c2;
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c59(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsevalue() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = [];
      if (peg$c60.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c61); }
      }
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          if (peg$c60.test(input.charAt(peg$currPos))) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c61); }
          }
        }
      } else {
        s1 = peg$c2;
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c62(s1);
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parsebracedvalue();
        if (s1 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c63(s1);
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = [];
          s2 = peg$parse_();
          while (s2 !== peg$FAILED) {
            s1.push(s2);
            s2 = peg$parse_();
          }
          if (s1 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 35) {
              s2 = peg$c64;
              peg$currPos++;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c65); }
            }
            if (s2 !== peg$FAILED) {
              s3 = [];
              s4 = peg$parse_();
              while (s4 !== peg$FAILED) {
                s3.push(s4);
                s4 = peg$parse_();
              }
              if (s3 !== peg$FAILED) {
                s4 = peg$parsevalue();
                if (s4 !== peg$FAILED) {
                  peg$reportedPos = s0;
                  s1 = peg$c52(s4);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c2;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c2;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c2;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c2;
          }
        }
      }

      return s0;
    }

    function peg$parsebracedvalue() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 123) {
        s1 = peg$c5;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c6); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = peg$currPos;
        s2 = peg$c66();
        if (s2) {
          s2 = peg$c15;
        } else {
          s2 = peg$c2;
        }
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$parsestring();
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$parsestring();
          }
          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 125) {
              s4 = peg$c7;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c8); }
            }
            if (s4 !== peg$FAILED) {
              peg$reportedPos = peg$currPos;
              s5 = peg$c67(s3);
              if (s5) {
                s5 = peg$c15;
              } else {
                s5 = peg$c2;
              }
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c52(s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c2;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c2;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c2;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c2;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c2;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 34) {
          s1 = peg$c53;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c54); }
        }
        if (s1 !== peg$FAILED) {
          peg$reportedPos = peg$currPos;
          s2 = peg$c68();
          if (s2) {
            s2 = peg$c15;
          } else {
            s2 = peg$c2;
          }
          if (s2 !== peg$FAILED) {
            s3 = [];
            s4 = peg$parsestring();
            while (s4 !== peg$FAILED) {
              s3.push(s4);
              s4 = peg$parsestring();
            }
            if (s3 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 34) {
                s4 = peg$c53;
                peg$currPos++;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c54); }
              }
              if (s4 !== peg$FAILED) {
                peg$reportedPos = peg$currPos;
                s5 = peg$c67(s3);
                if (s5) {
                  s5 = peg$c15;
                } else {
                  s5 = peg$c2;
                }
                if (s5 !== peg$FAILED) {
                  peg$reportedPos = s0;
                  s1 = peg$c52(s3);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c2;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c2;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c2;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c2;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c2;
        }
      }

      return s0;
    }

    function peg$parseurl() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 123) {
        s1 = peg$c5;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c6); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = peg$currPos;
        s2 = peg$c66();
        if (s2) {
          s2 = peg$c15;
        } else {
          s2 = peg$c2;
        }
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$parseurlchar();
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$parseurlchar();
          }
          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 125) {
              s4 = peg$c7;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c8); }
            }
            if (s4 !== peg$FAILED) {
              peg$reportedPos = peg$currPos;
              s5 = peg$c67(s3);
              if (s5) {
                s5 = peg$c15;
              } else {
                s5 = peg$c2;
              }
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c63(s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c2;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c2;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c2;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c2;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c2;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 34) {
          s1 = peg$c53;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c54); }
        }
        if (s1 !== peg$FAILED) {
          peg$reportedPos = peg$currPos;
          s2 = peg$c68();
          if (s2) {
            s2 = peg$c15;
          } else {
            s2 = peg$c2;
          }
          if (s2 !== peg$FAILED) {
            s3 = [];
            s4 = peg$parseurlchar();
            while (s4 !== peg$FAILED) {
              s3.push(s4);
              s4 = peg$parseurlchar();
            }
            if (s3 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 34) {
                s4 = peg$c53;
                peg$currPos++;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c54); }
              }
              if (s4 !== peg$FAILED) {
                peg$reportedPos = peg$currPos;
                s5 = peg$c67(s3);
                if (s5) {
                  s5 = peg$c15;
                } else {
                  s5 = peg$c2;
                }
                if (s5 !== peg$FAILED) {
                  peg$reportedPos = s0;
                  s1 = peg$c63(s3);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c2;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c2;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c2;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c2;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c2;
        }
      }

      return s0;
    }

    function peg$parsestring() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parseplaintext();
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c69(s1);
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 2) === peg$c70) {
          s1 = peg$c70;
          peg$currPos += 2;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c71); }
        }
        if (s1 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c72();
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 92) {
            s1 = peg$c73;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c74); }
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parsequotedchar();
            if (s2 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c69(s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c2;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c2;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = [];
            s2 = peg$parse_();
            if (s2 === peg$FAILED) {
              if (peg$c75.test(input.charAt(peg$currPos))) {
                s2 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c76); }
              }
            }
            if (s2 !== peg$FAILED) {
              while (s2 !== peg$FAILED) {
                s1.push(s2);
                s2 = peg$parse_();
                if (s2 === peg$FAILED) {
                  if (peg$c75.test(input.charAt(peg$currPos))) {
                    s2 = input.charAt(peg$currPos);
                    peg$currPos++;
                  } else {
                    s2 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c76); }
                  }
                }
              }
            } else {
              s1 = peg$c2;
            }
            if (s1 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c77(s1);
            }
            s0 = s1;
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = [];
              if (peg$c78.test(input.charAt(peg$currPos))) {
                s2 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c79); }
              }
              if (s2 !== peg$FAILED) {
                while (s2 !== peg$FAILED) {
                  s1.push(s2);
                  if (peg$c78.test(input.charAt(peg$currPos))) {
                    s2 = input.charAt(peg$currPos);
                    peg$currPos++;
                  } else {
                    s2 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c79); }
                  }
                }
              } else {
                s1 = peg$c2;
              }
              if (s1 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c80();
              }
              s0 = s1;
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 95) {
                  s1 = peg$c81;
                  peg$currPos++;
                } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c82); }
                }
                if (s1 !== peg$FAILED) {
                  s2 = peg$parseparam();
                  if (s2 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c83(s2);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c2;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c2;
                }
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  if (input.charCodeAt(peg$currPos) === 94) {
                    s1 = peg$c84;
                    peg$currPos++;
                  } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c85); }
                  }
                  if (s1 !== peg$FAILED) {
                    s2 = peg$parseparam();
                    if (s2 !== peg$FAILED) {
                      peg$reportedPos = s0;
                      s1 = peg$c86(s2);
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c2;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c2;
                  }
                  if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    if (input.substr(peg$currPos, 5) === peg$c87) {
                      s1 = peg$c87;
                      peg$currPos += 5;
                    } else {
                      s1 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c88); }
                    }
                    if (s1 !== peg$FAILED) {
                      s2 = peg$parsebracedparam();
                      if (s2 !== peg$FAILED) {
                        peg$reportedPos = s0;
                        s1 = peg$c89(s2);
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c2;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c2;
                    }
                    if (s0 === peg$FAILED) {
                      s0 = peg$currPos;
                      if (input.substr(peg$currPos, 5) === peg$c90) {
                        s1 = peg$c90;
                        peg$currPos += 5;
                      } else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c91); }
                      }
                      if (s1 !== peg$FAILED) {
                        s2 = [];
                        s3 = peg$parseurlchar();
                        while (s3 !== peg$FAILED) {
                          s2.push(s3);
                          s3 = peg$parseurlchar();
                        }
                        if (s2 !== peg$FAILED) {
                          if (input.charCodeAt(peg$currPos) === 125) {
                            s3 = peg$c7;
                            peg$currPos++;
                          } else {
                            s3 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c8); }
                          }
                          if (s3 !== peg$FAILED) {
                            peg$reportedPos = s0;
                            s1 = peg$c92(s2);
                            s0 = s1;
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c2;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c2;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c2;
                      }
                      if (s0 === peg$FAILED) {
                        s0 = peg$currPos;
                        if (input.substr(peg$currPos, 7) === peg$c93) {
                          s1 = peg$c93;
                          peg$currPos += 7;
                        } else {
                          s1 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c94); }
                        }
                        if (s1 !== peg$FAILED) {
                          s2 = peg$parsebracedparam();
                          if (s2 !== peg$FAILED) {
                            peg$reportedPos = s0;
                            s1 = peg$c89(s2);
                            s0 = s1;
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c2;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c2;
                        }
                        if (s0 === peg$FAILED) {
                          s0 = peg$currPos;
                          if (input.substr(peg$currPos, 7) === peg$c95) {
                            s1 = peg$c95;
                            peg$currPos += 7;
                          } else {
                            s1 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c96); }
                          }
                          if (s1 !== peg$FAILED) {
                            s2 = peg$parsebracedparam();
                            if (s2 !== peg$FAILED) {
                              peg$reportedPos = s0;
                              s1 = peg$c97(s2);
                              s0 = s1;
                            } else {
                              peg$currPos = s0;
                              s0 = peg$c2;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c2;
                          }
                          if (s0 === peg$FAILED) {
                            s0 = peg$currPos;
                            if (input.substr(peg$currPos, 7) === peg$c98) {
                              s1 = peg$c98;
                              peg$currPos += 7;
                            } else {
                              s1 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c99); }
                            }
                            if (s1 !== peg$FAILED) {
                              s2 = peg$parsebracedparam();
                              if (s2 !== peg$FAILED) {
                                peg$reportedPos = s0;
                                s1 = peg$c100(s2);
                                s0 = s1;
                              } else {
                                peg$currPos = s0;
                                s0 = peg$c2;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$c2;
                            }
                            if (s0 === peg$FAILED) {
                              s0 = peg$currPos;
                              if (input.charCodeAt(peg$currPos) === 123) {
                                s1 = peg$c5;
                                peg$currPos++;
                              } else {
                                s1 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c6); }
                              }
                              if (s1 !== peg$FAILED) {
                                s2 = [];
                                s3 = peg$parsestring();
                                while (s3 !== peg$FAILED) {
                                  s2.push(s3);
                                  s3 = peg$parsestring();
                                }
                                if (s2 !== peg$FAILED) {
                                  if (input.charCodeAt(peg$currPos) === 125) {
                                    s3 = peg$c7;
                                    peg$currPos++;
                                  } else {
                                    s3 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c8); }
                                  }
                                  if (s3 !== peg$FAILED) {
                                    peg$reportedPos = s0;
                                    s1 = peg$c101(s2);
                                    s0 = s1;
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$c2;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$c2;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$c2;
                              }
                              if (s0 === peg$FAILED) {
                                s0 = peg$currPos;
                                if (input.charCodeAt(peg$currPos) === 36) {
                                  s1 = peg$c102;
                                  peg$currPos++;
                                } else {
                                  s1 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$c103); }
                                }
                                if (s1 !== peg$FAILED) {
                                  s2 = [];
                                  s3 = peg$parsestring();
                                  while (s3 !== peg$FAILED) {
                                    s2.push(s3);
                                    s3 = peg$parsestring();
                                  }
                                  if (s2 !== peg$FAILED) {
                                    if (input.charCodeAt(peg$currPos) === 36) {
                                      s3 = peg$c102;
                                      peg$currPos++;
                                    } else {
                                      s3 = peg$FAILED;
                                      if (peg$silentFails === 0) { peg$fail(peg$c103); }
                                    }
                                    if (s3 !== peg$FAILED) {
                                      peg$reportedPos = s0;
                                      s1 = peg$c92(s2);
                                      s0 = s1;
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$c2;
                                    }
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$c2;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$c2;
                                }
                                if (s0 === peg$FAILED) {
                                  s0 = peg$currPos;
                                  if (input.charCodeAt(peg$currPos) === 37) {
                                    s1 = peg$c104;
                                    peg$currPos++;
                                  } else {
                                    s1 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c105); }
                                  }
                                  if (s1 !== peg$FAILED) {
                                    s2 = [];
                                    if (peg$c106.test(input.charAt(peg$currPos))) {
                                      s3 = input.charAt(peg$currPos);
                                      peg$currPos++;
                                    } else {
                                      s3 = peg$FAILED;
                                      if (peg$silentFails === 0) { peg$fail(peg$c107); }
                                    }
                                    while (s3 !== peg$FAILED) {
                                      s2.push(s3);
                                      if (peg$c106.test(input.charAt(peg$currPos))) {
                                        s3 = input.charAt(peg$currPos);
                                        peg$currPos++;
                                      } else {
                                        s3 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$c107); }
                                      }
                                    }
                                    if (s2 !== peg$FAILED) {
                                      if (input.charCodeAt(peg$currPos) === 10) {
                                        s3 = peg$c108;
                                        peg$currPos++;
                                      } else {
                                        s3 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$c109); }
                                      }
                                      if (s3 !== peg$FAILED) {
                                        peg$reportedPos = s0;
                                        s1 = peg$c80();
                                        s0 = s1;
                                      } else {
                                        peg$currPos = s0;
                                        s0 = peg$c2;
                                      }
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$c2;
                                    }
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$c2;
                                  }
                                  if (s0 === peg$FAILED) {
                                    s0 = peg$currPos;
                                    if (input.charCodeAt(peg$currPos) === 92) {
                                      s1 = peg$c73;
                                      peg$currPos++;
                                    } else {
                                      s1 = peg$FAILED;
                                      if (peg$silentFails === 0) { peg$fail(peg$c74); }
                                    }
                                    if (s1 !== peg$FAILED) {
                                      if (peg$c110.test(input.charAt(peg$currPos))) {
                                        s2 = input.charAt(peg$currPos);
                                        peg$currPos++;
                                      } else {
                                        s2 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$c111); }
                                      }
                                      if (s2 !== peg$FAILED) {
                                        s3 = peg$currPos;
                                        if (input.charCodeAt(peg$currPos) === 91) {
                                          s4 = peg$c112;
                                          peg$currPos++;
                                        } else {
                                          s4 = peg$FAILED;
                                          if (peg$silentFails === 0) { peg$fail(peg$c113); }
                                        }
                                        if (s4 !== peg$FAILED) {
                                          s5 = [];
                                          s6 = peg$parsekey_value();
                                          while (s6 !== peg$FAILED) {
                                            s5.push(s6);
                                            s6 = peg$parsekey_value();
                                          }
                                          if (s5 !== peg$FAILED) {
                                            if (input.charCodeAt(peg$currPos) === 93) {
                                              s6 = peg$c114;
                                              peg$currPos++;
                                            } else {
                                              s6 = peg$FAILED;
                                              if (peg$silentFails === 0) { peg$fail(peg$c115); }
                                            }
                                            if (s6 !== peg$FAILED) {
                                              s4 = [s4, s5, s6];
                                              s3 = s4;
                                            } else {
                                              peg$currPos = s3;
                                              s3 = peg$c2;
                                            }
                                          } else {
                                            peg$currPos = s3;
                                            s3 = peg$c2;
                                          }
                                        } else {
                                          peg$currPos = s3;
                                          s3 = peg$c2;
                                        }
                                        if (s3 === peg$FAILED) {
                                          s3 = peg$c35;
                                        }
                                        if (s3 !== peg$FAILED) {
                                          s4 = peg$parseparam();
                                          if (s4 !== peg$FAILED) {
                                            peg$reportedPos = s0;
                                            s1 = peg$c116(s2, s4);
                                            s0 = s1;
                                          } else {
                                            peg$currPos = s0;
                                            s0 = peg$c2;
                                          }
                                        } else {
                                          peg$currPos = s0;
                                          s0 = peg$c2;
                                        }
                                      } else {
                                        peg$currPos = s0;
                                        s0 = peg$c2;
                                      }
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$c2;
                                    }
                                    if (s0 === peg$FAILED) {
                                      s0 = peg$currPos;
                                      if (input.charCodeAt(peg$currPos) === 92) {
                                        s1 = peg$c73;
                                        peg$currPos++;
                                      } else {
                                        s1 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$c74); }
                                      }
                                      if (s1 !== peg$FAILED) {
                                        if (peg$c110.test(input.charAt(peg$currPos))) {
                                          s2 = input.charAt(peg$currPos);
                                          peg$currPos++;
                                        } else {
                                          s2 = peg$FAILED;
                                          if (peg$silentFails === 0) { peg$fail(peg$c111); }
                                        }
                                        if (s2 !== peg$FAILED) {
                                          s3 = peg$currPos;
                                          if (input.charCodeAt(peg$currPos) === 91) {
                                            s4 = peg$c112;
                                            peg$currPos++;
                                          } else {
                                            s4 = peg$FAILED;
                                            if (peg$silentFails === 0) { peg$fail(peg$c113); }
                                          }
                                          if (s4 !== peg$FAILED) {
                                            s5 = [];
                                            s6 = peg$parsekey_value();
                                            while (s6 !== peg$FAILED) {
                                              s5.push(s6);
                                              s6 = peg$parsekey_value();
                                            }
                                            if (s5 !== peg$FAILED) {
                                              if (input.charCodeAt(peg$currPos) === 93) {
                                                s6 = peg$c114;
                                                peg$currPos++;
                                              } else {
                                                s6 = peg$FAILED;
                                                if (peg$silentFails === 0) { peg$fail(peg$c115); }
                                              }
                                              if (s6 !== peg$FAILED) {
                                                s4 = [s4, s5, s6];
                                                s3 = s4;
                                              } else {
                                                peg$currPos = s3;
                                                s3 = peg$c2;
                                              }
                                            } else {
                                              peg$currPos = s3;
                                              s3 = peg$c2;
                                            }
                                          } else {
                                            peg$currPos = s3;
                                            s3 = peg$c2;
                                          }
                                          if (s3 === peg$FAILED) {
                                            s3 = peg$c35;
                                          }
                                          if (s3 !== peg$FAILED) {
                                            s4 = [];
                                            s5 = peg$parse_();
                                            if (s5 !== peg$FAILED) {
                                              while (s5 !== peg$FAILED) {
                                                s4.push(s5);
                                                s5 = peg$parse_();
                                              }
                                            } else {
                                              s4 = peg$c2;
                                            }
                                            if (s4 !== peg$FAILED) {
                                              peg$reportedPos = s0;
                                              s1 = peg$c117(s2);
                                              s0 = s1;
                                            } else {
                                              peg$currPos = s0;
                                              s0 = peg$c2;
                                            }
                                          } else {
                                            peg$currPos = s0;
                                            s0 = peg$c2;
                                          }
                                        } else {
                                          peg$currPos = s0;
                                          s0 = peg$c2;
                                        }
                                      } else {
                                        peg$currPos = s0;
                                        s0 = peg$c2;
                                      }
                                      if (s0 === peg$FAILED) {
                                        s0 = peg$currPos;
                                        if (input.charCodeAt(peg$currPos) === 92) {
                                          s1 = peg$c73;
                                          peg$currPos++;
                                        } else {
                                          s1 = peg$FAILED;
                                          if (peg$silentFails === 0) { peg$fail(peg$c74); }
                                        }
                                        if (s1 !== peg$FAILED) {
                                          s2 = peg$parseplaintext();
                                          if (s2 !== peg$FAILED) {
                                            s3 = peg$currPos;
                                            if (input.charCodeAt(peg$currPos) === 91) {
                                              s4 = peg$c112;
                                              peg$currPos++;
                                            } else {
                                              s4 = peg$FAILED;
                                              if (peg$silentFails === 0) { peg$fail(peg$c113); }
                                            }
                                            if (s4 !== peg$FAILED) {
                                              s5 = [];
                                              s6 = peg$parsekey_value();
                                              while (s6 !== peg$FAILED) {
                                                s5.push(s6);
                                                s6 = peg$parsekey_value();
                                              }
                                              if (s5 !== peg$FAILED) {
                                                if (input.charCodeAt(peg$currPos) === 93) {
                                                  s6 = peg$c114;
                                                  peg$currPos++;
                                                } else {
                                                  s6 = peg$FAILED;
                                                  if (peg$silentFails === 0) { peg$fail(peg$c115); }
                                                }
                                                if (s6 !== peg$FAILED) {
                                                  s4 = [s4, s5, s6];
                                                  s3 = s4;
                                                } else {
                                                  peg$currPos = s3;
                                                  s3 = peg$c2;
                                                }
                                              } else {
                                                peg$currPos = s3;
                                                s3 = peg$c2;
                                              }
                                            } else {
                                              peg$currPos = s3;
                                              s3 = peg$c2;
                                            }
                                            if (s3 === peg$FAILED) {
                                              s3 = peg$c35;
                                            }
                                            if (s3 !== peg$FAILED) {
                                              if (input.charCodeAt(peg$currPos) === 123) {
                                                s4 = peg$c5;
                                                peg$currPos++;
                                              } else {
                                                s4 = peg$FAILED;
                                                if (peg$silentFails === 0) { peg$fail(peg$c6); }
                                              }
                                              if (s4 !== peg$FAILED) {
                                                s5 = [];
                                                s6 = peg$parsestring();
                                                while (s6 !== peg$FAILED) {
                                                  s5.push(s6);
                                                  s6 = peg$parsestring();
                                                }
                                                if (s5 !== peg$FAILED) {
                                                  if (input.charCodeAt(peg$currPos) === 125) {
                                                    s6 = peg$c7;
                                                    peg$currPos++;
                                                  } else {
                                                    s6 = peg$FAILED;
                                                    if (peg$silentFails === 0) { peg$fail(peg$c8); }
                                                  }
                                                  if (s6 !== peg$FAILED) {
                                                    peg$reportedPos = s0;
                                                    s1 = peg$c118(s2, s5);
                                                    s0 = s1;
                                                  } else {
                                                    peg$currPos = s0;
                                                    s0 = peg$c2;
                                                  }
                                                } else {
                                                  peg$currPos = s0;
                                                  s0 = peg$c2;
                                                }
                                              } else {
                                                peg$currPos = s0;
                                                s0 = peg$c2;
                                              }
                                            } else {
                                              peg$currPos = s0;
                                              s0 = peg$c2;
                                            }
                                          } else {
                                            peg$currPos = s0;
                                            s0 = peg$c2;
                                          }
                                        } else {
                                          peg$currPos = s0;
                                          s0 = peg$c2;
                                        }
                                        if (s0 === peg$FAILED) {
                                          s0 = peg$currPos;
                                          if (input.charCodeAt(peg$currPos) === 92) {
                                            s1 = peg$c73;
                                            peg$currPos++;
                                          } else {
                                            s1 = peg$FAILED;
                                            if (peg$silentFails === 0) { peg$fail(peg$c74); }
                                          }
                                          if (s1 !== peg$FAILED) {
                                            s2 = peg$parseplaintext();
                                            if (s2 !== peg$FAILED) {
                                              s3 = [];
                                              s4 = peg$parse_();
                                              while (s4 !== peg$FAILED) {
                                                s3.push(s4);
                                                s4 = peg$parse_();
                                              }
                                              if (s3 !== peg$FAILED) {
                                                peg$reportedPos = s0;
                                                s1 = peg$c119(s2);
                                                s0 = s1;
                                              } else {
                                                peg$currPos = s0;
                                                s0 = peg$c2;
                                              }
                                            } else {
                                              peg$currPos = s0;
                                              s0 = peg$c2;
                                            }
                                          } else {
                                            peg$currPos = s0;
                                            s0 = peg$c2;
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseparam() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (peg$c120.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c121); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c69(s1);
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 92) {
          s1 = peg$c73;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c74); }
        }
        if (s1 !== peg$FAILED) {
          if (input.length > peg$currPos) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c122); }
          }
          if (s2 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c69(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c2;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c2;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parsebracedparam();
          if (s1 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c69(s1);
          }
          s0 = s1;
        }
      }

      return s0;
    }

    function peg$parsebracedparam() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 123) {
        s1 = peg$c5;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c6); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parsestring();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsestring();
        }
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 125) {
            s3 = peg$c7;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c8); }
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c92(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c2;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c2;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c2;
      }

      return s0;
    }

    function peg$parsequotedchar() {
      var s0, s1, s2;

      s0 = peg$currPos;
      peg$reportedPos = peg$currPos;
      s1 = peg$c123();
      if (s1) {
        s1 = peg$c15;
      } else {
        s1 = peg$c2;
      }
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 34) {
          s2 = peg$c53;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c54); }
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c124();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c2;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c2;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (peg$c125.test(input.charAt(peg$currPos))) {
          s1 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c126); }
        }
        if (s1 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c69(s1);
        }
        s0 = s1;
      }

      return s0;
    }

    function peg$parseurlchar() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = [];
      if (peg$c127.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c128); }
      }
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          if (peg$c127.test(input.charAt(peg$currPos))) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c128); }
          }
        }
      } else {
        s1 = peg$c2;
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c92(s1);
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 92) {
          s1 = peg$c73;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c74); }
        }
        if (s1 !== peg$FAILED) {
          if (input.length > peg$currPos) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c122); }
          }
          if (s2 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c69(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c2;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c2;
        }
      }

      return s0;
    }

    function peg$parseplaintext() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      peg$reportedPos = peg$currPos;
      s1 = peg$c129();
      if (s1) {
        s1 = peg$c15;
      } else {
        s1 = peg$c2;
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        if (peg$c130.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c131); }
        }
        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            if (peg$c130.test(input.charAt(peg$currPos))) {
              s3 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c131); }
            }
          }
        } else {
          s2 = peg$c2;
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c92(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c2;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c2;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        peg$reportedPos = peg$currPos;
        s1 = peg$c132();
        if (s1) {
          s1 = peg$c15;
        } else {
          s1 = peg$c2;
        }
        if (s1 !== peg$FAILED) {
          s2 = [];
          if (peg$c133.test(input.charAt(peg$currPos))) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c134); }
          }
          if (s3 !== peg$FAILED) {
            while (s3 !== peg$FAILED) {
              s2.push(s3);
              if (peg$c133.test(input.charAt(peg$currPos))) {
                s3 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c134); }
              }
            }
          } else {
            s2 = peg$c2;
          }
          if (s2 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c92(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c2;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c2;
        }
      }

      return s0;
    }

    function peg$parse_() {
      var s0, s1;

      s0 = [];
      if (peg$c135.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c136); }
      }
      if (s1 !== peg$FAILED) {
        while (s1 !== peg$FAILED) {
          s0.push(s1);
          if (peg$c135.test(input.charAt(peg$currPos))) {
            s1 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c136); }
          }
        }
      } else {
        s0 = peg$c2;
      }

      return s0;
    }

    function peg$parseattachmentlist() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseattachment();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseattachmentcdr();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseattachmentcdr();
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c137(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c2;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c2;
      }

      return s0;
    }

    function peg$parseattachmentcdr() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 59) {
        s1 = peg$c138;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c139); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseattachment();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c140(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c2;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c2;
      }

      return s0;
    }

    function peg$parseattachment() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parsefileparts();
      if (s1 === peg$FAILED) {
        s1 = peg$c35;
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c141(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsefileparts() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsefilepart();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parsefilepartcdr();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsefilepartcdr();
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c137(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c2;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c2;
      }

      return s0;
    }

    function peg$parsefilepartcdr() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 58) {
        s1 = peg$c142;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c143); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsefilepart();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c144(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c2;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c2;
      }

      return s0;
    }

    function peg$parsefilepart() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parsefilechars();
      if (s1 === peg$FAILED) {
        s1 = peg$c35;
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c145(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsefilechars() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parsefilechar();
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          s2 = peg$parsefilechar();
        }
      } else {
        s1 = peg$c2;
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c92(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsefilechar() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = [];
      if (peg$c146.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c147); }
      }
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          if (peg$c146.test(input.charAt(peg$currPos))) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c147); }
          }
        }
      } else {
        s1 = peg$c2;
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c92(s1);
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 92) {
          s1 = peg$c73;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c74); }
        }
        if (s1 !== peg$FAILED) {
          if (input.length > peg$currPos) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c122); }
          }
          if (s2 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c69(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c2;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c2;
        }
      }

      return s0;
    }


      'use strict';

      var bibtex = {pos: {}, references: [], strings: Dict({}), comments: [], errors: []};

      function flatten(str) {
        return (Array.isArray(str) ? str.map(function(c) { return flatten(c); }).join('') : ('' + str));
      }

      function filterattachments(attachments, key) {
        attachments = attachments.map(function(attachment) {
          if (attachment && attachment.path && key == 'sentelink') {
            return {title: attachment.title, mimeType: attachment.mimeType, path: attachment.path.replace(/,.*/, '')};
          } else {
            return attachment;
          }
        }).filter(function(attachment) {
          return (attachment && attachment.path  && attachment.path != '');
        });

        attachments.sort(function(a, b) {
          if (a.path < b.path) {
            return -1;
          } else if (a.path > b.path) {
            return 1;
          } else {
            return 0;
          }
        });

        return attachments;
      }

      function error(str) {
        bibtex.errors.push(str);
      }

      var Creators = new function() {
        function compact(fragments) {
          return fragments.reduce(function(result, fragment) {
            if (result.length == 0) { return [fragment]; }

            if ((result[result.length - 1] instanceof String) || (fragment instanceof String)) { return result.concat(fragment); }

            result[result.length - 1] += fragment;
            return result;
          }, []);
        }

        function split(fragments, sep) {
          fragments = compact(fragments);
          var groups = [];

          function push(fragment, newitem) {
            if (newitem || groups.length == 0) { groups.push([]); }
            groups[groups.length - 1].push(fragment);
          }

          fragments.forEach(function(fragment) {
            if (fragment instanceof String) {
              push(fragment);
            } else {
              fragment.split(sep).forEach(function(splinter, i) {
                // first word is before the separator, so it is appended to the previous chunk
                // all other words start a new entry
                push(splinter, i > 0);
              });
            }
          });

          groups = groups.map(function(group) { return compact(group); });

          groups.forEach(function(group) { // 'trim' the groups
            if (group.length == 0) { return; }
            if (! (group[0] instanceof String)) {
              group[0] = group[0].replace(/^\s+/gm, '');
              if (group[0] == '') { group.shift(); }
            }

            if (group.length == 0) { return; }
            var last = group.length - 1;
            if (! (group[last] instanceof String)) {
              group[last] = group[last].replace(/\s+$/gm, '');
              if (group[last] == '') { group.pop(); }
            }
          });
          return groups;
        }

        function join(group) {
          return group.join('').trim();
        }

        this.parse = function(creators) {
          return split(creators, /\s+and\s/).map(function(creator) {
            var name = split(creator, ',');

            switch (name.length) {
              case 0:
                return null;

              case 1: // single string, no commas
                if (name[0].length == 1 && (name[0][0] instanceof String)) { // single literal
                  return { lastName: '' + name[0][0], fieldMode: 1 };
                }
                // single string, no commas
                return join(name[0]); // this will be cleaned up by zotero utils laters

              case 2: // last name, first name
                return {lastName: join(name[0]), firstName: join(name[1])};

              default: // assumed middle item is something like Jr.
                var firstName = join(name.pop());
                var lastName = name.map(function(n) { return join(n); }).join(', ');
                return {lastName: lastName, firstName: firstName};
            }
          });
        }
      }


    peg$result = peg$startRuleFunction();

    if (peg$result !== peg$FAILED && peg$currPos === input.length) {
      return peg$result;
    } else {
      if (peg$result !== peg$FAILED && peg$currPos < input.length) {
        peg$fail({ type: "end", description: "end of input" });
      }

      throw peg$buildException(null, peg$maxFailExpected, peg$maxFailPos);
    }
  }

  return {
    SyntaxError: SyntaxError,
    parse:       parse
  };
})();
