{
  @raw = options.raw

  @bibtex =
    references: []
    collections: []
    strings: Object.create(null)
    comments: []
    errors: []

  @quote = (state) ->
    switch state
      when '"'
        @braced = false
        @quoted = true
      when '{}'
        @braced = true
        @quoted = false
      else
        @braced = false
        @quoted = false
    return true

  @lookahead = (n) ->
    return "#{peg$currPos} :: #{input.substr(peg$currPos, n)}"

  @flatten = (str) ->
    return (@flatten(s) for s in str).join('') if Array.isArray(str)
    return '' + str

  @log = (msg...) ->
    msg = ((if (typeof m) in ['number', 'string'] then ('' + m) else JSON.stringify(m)) for m in msg).join(' ')
    msg = "\n\n*** #{msg} ***\n\n"
    (Translator?.log || console.log)(msg)
    return true

  @filterattachments = (attachments, key) ->
    if key == 'sentelink'
      for attachment in attachments
        attachment.path = attachment.path.replace(/,.*/, '') if attachment.path
    attachments = (attachment for attachment in attachments when attachment.path && attachment.path != '')

    attachments.sort (a, b) ->
      if a.path < b.path
        -1
      else if a.path > b.path
        1
      else
        0

    return attachments

  @skipEmptyKeys = (key) ->
    return key != ''

  @intersect = (v) ->
    return @indexOf(v) >= 0

  @unique = (arr) ->
    result = []
    for v in arr
      result.push v if result.indexOf(v) < 0
    return result

  @Creators = new class
    reduce: (result, fragment) ->
      # for the first item, return the item
      return [fragment] if result.length is 0

      # if either the last element of the result so far of the new string to be added is a literal, push it onto the
      # result (don't smush literals)
      return result.concat(fragment) if (result[result.length - 1] instanceof String) or (fragment instanceof String)

      # regular strings -- add to tail
      result[result.length - 1] += fragment
      return result

    compact: (fragments) ->
      fragments.reduce(@reduce, [])

    push: (groups, fragment, startNewGroup) ->
      groups.push [] if startNewGroup or groups.length is 0
      groups[groups.length - 1].push fragment

    split: (fragments, sep, groups=[]) ->
      fragments = @compact(fragments)

      for fragment in fragments
        if fragment instanceof String
          # literals always form a new substring
          @push groups, fragment

        else
          # split on separator and push resulting substrings
          for splinter, i in fragment.split(sep)
            # first word is before the separator, so it is appended to the previous chunk
            # all other words start a new entry
            @push groups, splinter, i > 0

      # compact regular strings in groups
      groups = (@compact(group) for group in groups)

      for group in groups # 'trim' the groups
        continue if group.length is 0

        # remove whitespace at the start of the group
        if typeof group[0] == 'string'
          group[0] = group[0].replace(/^\s+/g, '')
          group.shift() if group[0] == ''
        continue if group.length == 0

        # remove whitespace at the end of the group
        last = group.length - 1
        if typeof group[last] == 'string'
          group[last] = group[last].replace(/\s+$/g, '')
          group.pop() if group[last] == ''

      return groups

    join: (group) ->
      return group.join('').trim()

    creator: (name) ->
      name = @split(name, ",")

      switch name.length
        when 0
          return null

        when 1 # single string, no commas
          if name[0].length is 1 and (name[0][0] instanceof String) # single literal
            return { lastName: "" + name[0][0], fieldMode: 1 }

          # single string, no commas
          return @join name[0] # this will be cleaned up by zotero utils laters

        when 2 # last name, first name
          return { lastName: @join(name[0]), firstName: @join(name[1]) }

        else # assumed middle item is something like Jr.
          firstName = @join(name.pop())
          lastName = (@join(n) for n in name).join(', ')

          return { lastName: lastName, firstName: firstName }

    parse: (creators) ->
      return (@creator(name) for name in @split(creators, /\s+and\s+/))
}

start
  = entries:entry* { return @bibtex }

entry
  = _* '@comment'i _* "{" groupstree "}"
  / _* '@comment'i _* "{" comment:string* "}" { @bibtex.comments.push @flatten(comment).trim() }
  / _* '@string'i _* "{" _* str:key_value _* "}" { @bibtex.strings[str.verbatimKey] = str.value }
  / _* '@preamble'i _* "{" _* simplestring _* "}"
  / _* '@' reference
  / other:[^@]+ { @bibtex.comments.push @flatten(other).trim() }

reference
  = type:identifier _* "{" _* id:citekey _* "," fields:field* "}" _* {
      if fields.length is 0
        @bibtex.errors.push "@#{type}{#{id},}"
      else
        ref = {
          __type__: type.toLowerCase()
          __key__: id
        }

        for field in fields
          continue unless field.value && field.value != ''

          switch field.type
            when 'file'
              attachments = ref.file ? []
              ref.file = attachments.concat(field.value)

            when 'creator'
              ref[field.key] = field.value if field.value.length > 0

            else
              if ref[field.key] # duplicate fields are not supposed to occur I think
                note = if ref.__note__ then ref.__note__ + "<br/>\n" else ''
                ref.__note__ = note + field.key + "=" + field.value
              else
                ref[field.key] = field.value

        @bibtex.references.push ref
    }
  / err:[^@]* { @bibtex.errors.push "@#{@flatten(err)}" }

identifier
  = chars:[a-zA-Z]+ { return @flatten(chars) }

citekey
  = str:[^,]+ { return @flatten(str) }

field
  = _* key:attachmenttype _* '=' _* val:attachments _* (',' _*)? { return {key: 'file', type: 'file', value: @filterattachments(val || [], key)} }
  / _* key:creatortype _* '=' _* val:bracedvalue _* ("," _*)? {
      return {key: key.toLowerCase(), type: 'creator', value: @Creators.parse(val)}
    }
  / key_value

attachmenttype
  = ('sentelink'i / 'file'i / 'pdf'i / 'path'i)

creatortype
  = ('author'i / 'editor'i / 'translator'i)

attachments
  = '{' val:attachmentlist? '}' { return val }
  / '"' val:attachmentlist? '"' { return val }

key_value
  = _* 'url'i _* "=" _* val:url _* ("," _*)? { return {key: 'url', value: val.trim()} }
  / _* key:key _* "=" _* val:value _* ("," _*)? { return {key: key.trim().toLowerCase(), value: val.trim(), verbatimKey: key.trim()} }

key
  = key:[^ \t\n\r=]+ { return @flatten(key) }

value
  = val:[^#"{} \t\n\r,]+ {
      # don't re-use params
      value = @flatten(val)
      return @bibtex.strings[value] or value
    }
  / val:bracedvalue { return @flatten(val) }
  / _* "#" _* val:value { return val }

simplestring
  = [^#"{} \t\n\r,]+
  / '"' [^"]* '"'
  / _* "#" _* simplestring

bracedvalue
  = '{' &{ @quote('{}') } val:strings '}' &{ @quote() } { return val }
  / '"' &{ @quote('"')  } val:strings '"' &{ @quote() } { return val }

url
  = '{' &{ @quote('{}') } val:urlchar* '}' &{ @quote() } { return @flatten(val) }
  / '"' &{ @quote('"')  } val:urlchar* '"' &{ @quote() } { return @flatten(val) }

strings
  = &{ !@raw } strings:string*    { return strings }
  / &{ @raw  } strings:raw*       { return strings }

raw
  = &{ @braced } text:[^\\{}]+    { return text.join('') }
  / &{ @quoted } text:[^\\"]+     { return text.join('') }
  / '\\' text:.                   { return "\\#{text}" }
  / '{' text:raw* '}'             { return new String("{#{text.join('')}}") }

string
  = text:plaintext                { return text }
  / "\\\\"                        { return "\n" }
  / bracket:[\[\]]                { return bracket }
  / "\\" text:quotedchar          { return text }
  / text:(_ / [~])+               { return ' ' }
  / [#$&]+                        { return '' } /* macro parameters, math mode, table separator */
  / '_' text:param                { return "<sub>#{text}</sub>" }
  / '^' text:param                { return "<sup>#{text}</sup>" }
  / "\\vphantom" text:bracedparam { return '' }
  / "\\emph" text:bracedparam     { return "<i>#{text}</i>" }
  / "\\url{" text:urlchar* "}"    { return @flatten(text) }
  / "\\textit" text:bracedparam   { return "<i>#{text}</i>" }
  / "\\textbf" text:bracedparam   { return "<b>#{text}</b>" }
  / "\\textsc" text:bracedparam   { return "<span style=\"small-caps\">#{text}</span>" }
  / '{' text:string* '}'          { return new String(@flatten(text)) } // use 'new String', not 'String', because only 'new String' will match 'instanceof'!
  / '$' text:string* '$'          { return @flatten(text) }
  /* / "%" [^\n]* "\n"            { return '' }          comment */
  / '%'                           { return '%' } // this doesn't feel right
  / "\\" command:[^a-z] ('[' key_value* ']')?  param:param {  # single-char command
      variants = ["\\#{command}#{param}"]
      variants.push("{\\#{command}#{param}}")     if param.length is 1
      variants.push("{\\#{command}#{param[1]}}")  if param.length is 3 and param[0] is '{' and param[2] is '}'

      hit = null
      for variant in variants
        hit ?= LaTeX.toUnicode[variant]

      return hit ? param
    }
  / "\\" cmd:[^a-z] ('[' key_value* ']')?  _+ {  # single-char command without parameter
      return LaTeX.toUnicode["\\#{cmd}"] if LaTeX.toUnicode["\\#{cmd}"]
      return cmd
    }
  / "\\" cmd:plaintext ('[' key_value* ']')? '{' text:string* '}' { # command
      return ((LaTeX.toUnicode["\\#{cmd}"] || '') + @flatten(text))
    }
  / "\\" cmd:plaintext _* {  # bare command
      return LaTeX.toUnicode["\\#{cmd}"] if LaTeX.toUnicode["\\#{cmd}"]
      return cmd
    }

param
  = text:[^\\{]           { return text }
  / "\\" text:.           { return text }
  / text:bracedparam      { return text }

bracedparam
  = '{' text:string* '}'  { return @flatten(text) }

quotedchar
  = &{ @quoted } '"' { return '"' }
  / text:[#$%&_\^\[\]{}]  { return text }

urlchar
  = text:[^\\{}]+ { return @flatten(text) }
  / "\\" text:. { return text }

plaintext
  = &{ @quoted  } text:[^ "\t\n\r#$%&~_\^{}\[\]\\]+ { return @flatten(text) }
  / &{ !@quoted } text:[^ \t\n\r#$%&~_\^{}\[\]\\]+  { return @flatten(text) }

attachmentlist
  = car:attachment cdr:attachmentcdr*  { return [car].concat(cdr || []) }

attachmentcdr
  = ';' att:attachment  { return att }

attachment
  = fileparts:fileparts? {
      # do not re-use varnames as pegcoffee blanks them out!
      parts = (v.trim() for v in fileparts || [])

      switch parts.length
        when 0
          return {}
        when 1
          attachment = { path: parts.shift() }
        else
          attachment = { title: parts.shift() }
          attachment.path = parts.shift() ? ''
          attachment.mimeType = parts.shift() ? ''

      attachment.title = 'Attachment' unless attachment.title && attachment.title != '' 
      attachment.mimeType = 'application/pdf' if attachment.mimeType.match(/pdf/i) || attachment.path.match(/\.pdf$/i)
      attachment.path = attachment.path.replace(/\\/g, '/')
      attachment.path = "file:///#{attachment.path}"  if attachment.path.match(/^[a-z]:\//i)
      attachment.path = "file:#{attachment.path}"  if attachment.path.match(/^\/\//)

      return attachment
    }

fileparts
  = car:filepart cdr:filepartcdr* { return [car].concat(cdr || []) }

filepartcdr
  = ':' part:filepart { return part }

filepart
  = part:filechars?  { return (part || '') }

filechars
  = text:filechar+ { return @flatten(text) }

filechar
  = text:[^\\{}:;]+ { return @flatten(text) }
  / "\\" text:.   { return text }

groupstree
  = _* 'jabref-meta:'i _* id:'groupstree:'i _* groups:group* _* {
      levels = Object.create(null)
      collections = []

      for group in groups
        continue unless group

        collection = Object.create(null)
        collection.name = group.data.shift()
        intersection = group.data.shift()

        collection.items = group.data.filter(@skipEmptyKeys)
        collection.collections = []

        levels[group.level] = collection
        if group.level == 1
          collections.push collection
        else
          levels[group.level - 1].collections.push collection
          switch intersection
            #when "0" # independent

            when "1" # intersection
              collection.items = collection.items.filter(@intersect, levels[group.level - 1].items)

            when "2" # union
              collection.items = @unique(levels[group.level - 1].items.concat(collection.items))

      @bibtex.collections = @bibtex.collections.concat(collections)
    }

group
  = [0-9]+ _* 'AllEntriesGroup:;'i _*                             { return null }
  / level:[0-9]+ _* 'ExplicitGroup:' _* group:grouparray* ';' _*  { return {level: parseInt(level), data:group} }

grouparray
  = elt:groupelement _* ("\\" [\r\n]* ';')? { return elt }

groupelement
  = chars:groupchars+ { return chars.join('') }

groupchars
  = "\\" [\r\n]* "\\" [\r\n] char:. { return char }
  / [\r\n]+                         { return '' }
  / chars:[^\\;\r\n]+               { return chars.join('') }
_
  = w:[ \t\n\r]+

