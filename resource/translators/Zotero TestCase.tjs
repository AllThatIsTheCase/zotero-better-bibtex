{
  "translatorID": "82512813-9edb-471c-aebc-eeaaf40c6cf9",
  "label": "Zotero TestCase",
  "creator": "Emiliano Heyns",
  "target": "json",
  "minVersion": "3.0b3",
  "maxVersion": "",
  "priority": 100,
  "configOptions": {
    "getCollections": true
  },
  "displayOptions": {
    "exportNotes": true,
    "exportFileData": false,
    "Export Collections": true
  },
  "inRepository": true,
  "translatorType": 3,
  "browserSupport": "gcsv"
}

function scrub(item) {
  delete item.__citekey__;
  delete item.libraryID;
  delete item.key;
  delete item.uniqueFields;
  delete item.dateAdded;
  delete item.dateModified;
  delete item.uri;
  delete item.multi;

  for_each (let creator in item.creators || []) {
    delete creator.creatorID;
    delete creator.multi;
  };

  item.attachments = collect(for (attachment of item.attachments || [])
    {
      path: attachment.localPath,
      title: attachment.title,
      mimeType: attachment.mimeType
    }
  );

  item.notes = collect(for (note of item.notes || []) if ((note.note || '').trim() !== '') (note.note || '').trim());

  item.tags = collect(for (tag of item.tags || []) tag.tag);
  item.tags.sort();

  for_each (let attr: let val of item) {
    if (typeof val === 'number') {
    } else if (Array.isArray(val) && val.length !== 0) { 
    } else if (typeof val === 'string') {
      if (val.trim() === '') { delete item[attr]; }
    } else if (typeof val === 'undefined') {
      delete item[attr];
    }
  }

  return item;
}

// @include "translator.js"

function detectImport() {
  var str, json = '';
  while((str = Zotero.read(1048576)) !== false) { json += str; }

  var data;
  try {
    data = JSON.parse(json);
  } catch (e) {
    Zotero.debug(e);
    return false;
  }

  return (data && data.config && (data.config.id == Translator.id) && data.items);
}

function doImport() {
  Translator.initialize();

  var str, json = '';
  while((str = Zotero.read(1048576)) !== false) { json += str; }
  var data = JSON.parse(json);

  for_each (let i in data.items) {
    var item = new Zotero.Item();
    for_each (let prop:let value of i) {
      item[prop] = value;
    }
    item.complete();
  }

  //TODO: import collections
}

function doExport() {
  Translator.initialize();

  var data = {
    config:       Translator.config(),
    collections:  Translator.collections(),
    items: []
  };

  for_each (var item from Zotero.nextItem()) {
    if (item.itemType != 'note' && item.itemType != 'attachment') { data.items.push(scrub(item)); }
  }

  Zotero.write(JSON.stringify(data, null, '  '));
}
