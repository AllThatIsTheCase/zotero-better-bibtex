{
  "translatorID": "f895aa0d-f28e-47fe-b247-2ea77c6ed583",
  "translatorType": 2,
  "label": "Better BibLaTeX",
  "creator": "Simon Kornblith, Richard Karnesky, Anders Johansson and Emiliano Heyns",
  "target": "bib",
  "minVersion": "2.1.9",
  "maxVersion": "null",
  "priority": 50,
  "inRepository": true,
  "configOptions": {
    "getCollections": "true"
  },
  "displayOptions": {
    "exportCharset": "UTF-8",
    "exportNotes": false,
    "exportFileData": false,
    "useJournalAbbreviation": false,
    "Export Collections": true
  }
}

/* Remove this for next Zotero release */

var strToISO = function(str) {
  var date = Zotero.Utilities.strToDate(str);

  if (date.year) {
    var dateString = Zotero.Utilities.lpad(date.year, "0", 4);
    if (parseInt(date.month) == date.month) {
      dateString += "-"+Zotero.Utilities.lpad(date.month+1, "0", 2);
      if(date.day) {
        dateString += "-"+Zotero.Utilities.lpad(date.day, "0", 2);
      }
    }

    return dateString;
  }
  return false;
};


// @include "translator.js"

Translator.fieldMap = Dict({
  // Zotero         BibTeX
  place:            {name: 'location', protect: true},
  chapter:          {name: 'chapter', protect: true},
  edition:          {name: 'edition', protect: true},
  title:            {name: 'title', protect: true},
  volume:           {name: 'volume', protect: true},
  rights:           {name: 'rights', protect: true},
  ISBN:             {name: 'isbn'},
  ISSN:             {name: 'issn'},
  url:              {name: 'url', esc: 'url'},
  DOI:              {name: 'doi', esc: 'doi'},
  shortTitle:       {name: 'shorttitle', protect: true},
  abstractNote:     {name: 'abstract'},
  numberOfVolumes:  {name: 'volumes'},
  version:          {name: 'version'},
  conferenceName:   {name: 'eventtitle', protect: true},
  numPages:         {name: 'pagetotal'},
  type:             {name: 'type'}
});

//POTENTIAL ISSUES
//"programTitle", "bookTitle" //TODO, check!!
//
//  accessDate:"accessDate", //only written on attached webpage snapshots by zo
//  journalAbbreviation:"journalAbbreviation", //not supported by bl

//  country:"country", //TODO if patent, should be put into 'location'

Translator.typeMap = Dict({
  // BibTeX                            Zotero
  // ----------------------------------------
  'book booklet manual proceedings':  'book',
  'inbook incollection':              'bookSection',
  'article misc':                     'journalArticle magazineArticle newspaperArticle',
  'thesis':                           'thesis',
  'letter':                           'email letter',
  'movie':                            'film',
  'artwork':                          'artwork',
  'online':                           'blogPost forumPost webpage',
  'inproceedings':                    'conferencePaper',
  'report':                           'report',
  'legislation':                      'stature bill',
  'jurisdiction':                     'case hearing',
  'patent':                           'patent',
  'audio':                            'audioRecording podcast',
  'video':                            'videoRecording',
  'software':                         'computerProgram',
  'unpublished':                      'manuscript presentation',
  'inreference':                      'encyclopediaArticle dictionaryEntry',
  'misc':                             'interview map instantMessage tvBroadcast radioBroadcast document'
});

var babelLanguageMap = Dict({
  af:         'afrikaans',
  am:         'amharic',
  ar:         'arabic',
  ast:        'asturian',
  bg:         'bulgarian',
  bn:         'bengali',
  bo:         'tibetan',
  br:         'breton',
  ca:         'catalan',
  cop:        'coptic',
  cy:         'welsh',
  cz:         'czech',
  da:         'danish',
  de_1996:    'ngerman',
  de_at_1996: 'naustrian',
  de_at:      'austrian',
  de_de_1996: 'ngerman',
  de:         ['german', 'germanb'],
  dsb:        ['lsorbian', 'lowersorbian'],
  dv:         'divehi',
  el:         'greek',
  el_polyton: 'polutonikogreek',
  en_au:      'australian',
  en_ca:      'canadian',
  en:         'english',
  en_gb:      ['british', 'ukenglish'],
  en_nz:      'newzealand',
  en_us:      ['american', 'usenglish'],
  eo:         'esperanto',
  es:         'spanish',
  et:         'estonian',
  eu:         'basque',
  fa:         'farsi',
  fi:         'finnish',
  fr_ca:      ['acadian', 'canadian', 'canadien'],
  fr:         ['french', 'francais'],
  fur:        'friulan',
  ga:         'irish',
  gd:         ['scottish', 'gaelic'],
  gl:         'galician',
  he:         'hebrew',
  hi:         'hindi',
  hr:         'croatian',
  hsb:        ['usorbian', 'uppersorbian'],
  hu:         'magyar',
  hy:         'armenian',
  ia:         'interlingua',
  id:         ['indonesian', 'bahasa', 'bahasai', 'indon', 'meyalu'],
  is:         'icelandic',
  it:         'italian',
  ja:         'japanese',
  kn:         'kannada',
  la:         'latin',
  lo:         'lao',
  lt:         'lithuanian',
  lv:         'latvian',
  ml:         'malayalam',
  mn:         'mongolian',
  mr:         'marathi',
  nb:         ['norsk', 'bokmal'],
  // nko
  nl:         'dutch',
  nn:         'nynorsk',
  no:         ['norwegian', 'norsk'],
  oc:         'occitan',
  pl:         'polish',
  pms:        'piedmontese',
  pt_br:      ['brazil', 'brazilian'],
  pt:         ['portuguese', 'portuges'],
  pt_pt:      'portuguese',
  rm:         'romansh',
  ro:         'romanian',
  ru:         'russian',
  sa:         'sanskrit',
  se:         'samin',
  sk:         'slovak',
  sl:         ['slovenian', 'slovene'],
  sq_al:      'albanian',
  sr_cyrl:    'serbianc',
  sr_latn:    'serbian',
  sr:         'serbian', //latin script as default?
  sv:         'swedish',
  syr:        'syriac',
  ta:         'tamil',
  te:         'telugu',
  th:         ['thai', 'thaicjk'],
  tk:         'turkmen',
  tr:         'turkish',
  uk:         'ukrainian',
  ur:         'urdu',
  vi:         'vietnamese',
  zh_latn:    'pinyin',
  zh:         'pinyin', //only supported chinese in babel is the romanization pinyin?
  zlm:        ['malay', 'bahasam', 'melayu'],
});
for_each (let key: let value of babelLanguageMap) {
  if (typeof value === 'string' ) {
    babelLanguageMap[key] = [value];
  }
}

// list of unique languages
var babelLanguageList = [];
for_each (let k: let v of babelLanguageMap) {
  for_each (let lang in v) {
    if (babelLanguageList.indexOf(lang) === -1) {
      babelLanguageList.push(lang);
    }
  }
}
var polyglossia = [ 'albanian', 'amharic', 'arabic', 'armenian', 'asturian', 'bahasai', 'bahasam', 'basque', 'bengali', 'brazilian', 'brazil',
                    'breton', 'bulgarian', 'catalan', 'coptic', 'croatian', 'czech', 'danish', 'divehi', 'dutch', 'english', 'british', 'ukenglish',
                    'esperanto', 'estonian', 'farsi', 'finnish', 'french', 'friulan', 'galician', 'german', 'austrian', 'naustrian', 'greek', 'hebrew',
                    'hindi', 'icelandic', 'interlingua', 'irish', 'italian', 'kannada', 'lao', 'latin', 'latvian', 'lithuanian', 'lsorbian', 'magyar',
                    'malayalam', 'marathi', 'nko', 'norsk', 'nynorsk', 'occitan', 'piedmontese', 'polish', 'portuges', 'romanian', 'romansh', 'russian',
                    'samin', 'sanskrit', 'scottish', 'serbian', 'slovak', 'slovenian', 'spanish', 'swedish', 'syriac', 'tamil', 'telugu', 'thai',
                    'tibetan', 'turkish', 'turkmen', 'ukrainian', 'urdu', 'usorbian', 'vietnamese', 'welsh'];

/* get_bigrams and string_similarity together implement http://www.catalysoft.com/articles/strikeamatch.html */
FuzzyLanguageLookup = {
  get_bigrams: function(string) {
    // Takes a string and returns a list of bigrams
    var s = string.toLowerCase();
    var v = new Array(s.length-1);
    for (i = 0; i< v.length; i++){
      v[i] =s.slice(i,i+2);
    }
    return v;
  },

  string_similarity: function(str1, str2){
    // Perform bigram comparison between two strings and return a percentage match in decimal form
    var pairs1 = this.get_bigrams(str1);
    var pairs2 = this.get_bigrams(str2);
    var union = pairs1.length + pairs2.length;
    var hit_count = 0;

    for_each (let p1 in pairs1) {
      for_each (let p2 in pairs2) {
        if (p1 === p2) { hit_count++; }
      }
    }

    return ((2.0 * hit_count) / union);
  },

  cache: Dict(),

  lookup: function(langcode) {
    if (!this.cache[langcode]) {
      this.cache[langcode] = [];

      for_each (let lc in babelLanguageList) {
        // for each possible language id, calculate its similarity to what was entered into zotero
        this.cache[langcode].push({lang: lc, sim: this.string_similarity(langcode, lc)});
      }
      this.cache[langcode].sort(function(a, b) {
        // sort the results so the most similar entries go to the front
        return b.sim - a.sim;
      });
    }
    return this.cache[langcode];
  }
};

function hasCreator(item, type) {
  return (item.creators || []).some(function(creator) { return (creator.creatorType == type); });
}

function doExport() {
  //Zotero.write('% biblatex export generated by Zotero '+Zotero.Utilities.getVersion());
  // to make sure the BOM gets ignored
  Zotero.write("\n");

  for_each (let item from Translator.nextItem()) {
    var ref = new Translator.Reference(item);

    // inbook is reasonable at times, using a bookauthor should indicate this
    if (item.itemType == 'bookSection' && hasCreator(item, 'bookAuthor')) { ref.itemtype = 'inbook'; }

    //a book without author but with editors is a collection
    if (item.itemType == 'book' && !hasCreator(item,'author') && hasCreator(item, 'editor')) { ref.itemtype = 'collection'; }

    //biblatex recommends us to use mvbook for multi-volume books
    if (ref.itemtype == 'book' && item.volume) { ref.itemtype = 'mvbook'; }

    if (Translator.usePrefix) {
      ref.add({name: 'options', value: 'useprefix'});
    }

    //all kinds of numbers (biblatex has additional support for journal number != issue, but zotero has not)
    ref.add({name: 'number', value: item.reportNumber || item.seriesNumber || item.patentNumber || item.billNumber || item.episodeNumber || item.number});

    //split numeric and nonnumeric issue specifications (for journals) into "number" and "issue"
    ref.add({name: (isNaN(parseInt(item.issue)) ? 'issue' : 'number'), value: item.issue});

    if (item.publicationTitle) {
      switch (item.itemType) {
        case 'bookSection':
        case 'conferencePaper':
        case 'dictionaryEntry':
        case 'encyclopediaArticle':
          ref.add({name: 'booktitle', value: item.publicationTitle, protect: true});
          break;

        case 'magazineArticle':
        case 'newspaperArticle':
          ref.add({name: 'journaltitle', value: item.publicationTitle, protect: true});
          break;

        case 'journalArticle':
          var abbr = Zotero.BetterBibTeX.keymanager.journalAbbrev(item);
          if (Translator.useJournalAbbreviation && abbr) {
            ref.add({name: 'journal', value: abbr, protect: true});
          } else {
            ref.add({name: 'journaltitle', value: item.publicationTitle, protect: true});
            ref.add({name: 'shortjournal', value: abbr, protect: true});
          }
          break;
      }
    }

    if (!ref.has('booktitle')) { ref.add({name: 'booktitle', value: item.encyclopediaTitle || item.dictionaryTitle || item.proceedingsTitle, protect: true}); }

    ref.add({name: 'titleaddon', value: item.websiteTitle || item.forumTitle || item.blogTitle || item.programTitle, protect: true});
    ref.add({name: 'series', value: item.seriesTitle || item.series, protect: true}); 

    switch (item.itemType) {
      case 'report':
      case 'thesis':
        ref.add({name: 'institution', value: item.publisher, protect: true});
        break;

      default:
        ref.add({name: 'publisher', value: item.publisher, protect: true});
        break;
    }

    switch (item.itemType) {
      case 'letter':
        ref.add({name: 'type', value: item.letterType || 'Letter'});
        break;

      case 'email':
        ref.add({name: 'type', value: 'E-mail'});
        break;

      default:
        if (item.itemType == 'thesis' && (item.thesisType || 'phd').match(/ph\.?d/i)) {
          ref.add({name: 'type', value: 'phdthesis'});
        } else {
          ref.add({name: 'type', value: item.manuscriptType || item.thesisType || item.websiteType || item.presentationType || item.reportType || item.mapType});
        }
        break;
    }

    ref.add({name: 'howpublished', value: item.presentationType || item.manuscriptType});

    //case of specific eprint-archives in archive-fields
    if (item.archive && item.archiveLocation) {
      var archive = true;
      switch (item.archive.toLowerCase()) {
        case 'arxiv':
          ref.add({name: 'eprinttype', value: 'arxiv'});
          ref.add({name: 'eprintclass', value: item.callNumber});
          break;

        case 'jstor':
          ref.add({name: 'eprinttype', value: 'jstor'});
          break;

        case 'pubmed':
          ref.add({name: 'eprinttype', value: 'pubmed'});
          break;

        case 'hdl':
          ref.add({name: 'eprinttype', value: 'hdl'});
          break;

        case 'googlebooks':
        case 'google books':
          ref.add({name: 'eprinttype', value: 'googlebooks'});
          break;

        default:
          archive = false;
      }

      if (archive) { ref.add({name: 'eprint', value: item.archiveLocation}); }
    }

    ref.add({name: 'note', value: item.meetingName});

    if (item.creators && item.creators.length) {
      // split creators into subcategories
      var authors = [];
      var bookauthors = [];
      var commentators = [];
      var editors = [];
      var editoras = [];
      var editorbs = [];
      var holders = [];
      var translators = [];
      var creatorString;

      for_each (let creator in item.creators) {
        if (('' + creator.firstName).trim() !== '' && ('' + creator.lastName).trim() !== '') {
          creatorString = creator.lastName + ', ' + creator.firstName;
        } else {
          creatorString = String(creator.lastName);
        }

        switch (creator.creatorType) {
          case 'author':
          case 'interviewer':
          case 'director':
          case 'programmer':
          case 'artist':
          case 'podcaster':
          case 'presenter':
            authors.push(creatorString);
            break;

          case 'bookAuthor':
            bookauthors.push(creatorString);
            break;

          case 'commenter':
            commentators.push(creatorString);
            break;

          case 'editor':
            editors.push(creatorString);
            break;

          case 'inventor':
            holders.push(creatorString);
            break;

          case 'translator':
            translators.push(creatorString);
            break;

          case 'seriesEditor': //let's call them redactors
            editorbs.push(creatorString);
            break;

          default: // the rest into editora with editoratype = collaborator
            editoras.push(creatorString);
        }
      }

      ref.add({name: 'author', value: authors, sep: ' and '});
      ref.add({name: 'bookauthor', value: bookauthors, sep: ' and '});
      ref.add({name: 'commentator', value: commentators, sep: ' and '});
      ref.add({name: 'editor', value: editors, sep: ' and '});

      ref.add({name: 'editora', value: editoras, sep: ' and '});
      if (editoras.length > 0) { ref.add({name: 'editoratype', value: 'collaborator'}); }

      ref.add({name: 'editorb', value: editorbs, sep: ' and '});
      if (editorbs.length > 0) { ref.add({name: 'editorbtype', value: 'redactor'}); }

      ref.add({name: 'holder', value: holders, sep: ' and '});
      ref.add({name: 'translator', value: translators, sep: ' and '});
    }

    if (item.accessDate) { ref.add({name: 'urldate', value: strToISO(item.accessDate)}); }

    if (item.date) {
      ref.add({name: 'date', value: strToISO(item.date) || String(item.date)});

      var date = Zotero.Utilities.strToDate(item.date);
      if (date) {
        ref.add({name: 'year', value: date.year});
      }
    }

    if (item.pages) {
      ref.add({name: 'pages', value: item.pages.replace(/[-\u2012-\u2015\u2053]+/g,"--")});
    }

    if (item.language) {
      var langlc = item.language.toLowerCase();
      var language = babelLanguageMap[langlc.replace(/[^a-z0-9]/, '_')];
      if (language) { // if the language map has the exact language code, use that language
        language = language[0];
      } else {
        // if not, it's time to get crafty.
        var sim = FuzzyLanguageLookup.lookup(langlc);
        if (sim[0].sim >= 0.90) { // only pick up a match if it's at least 90% similar
          language = sim[0].lang;
        } else {
          language = null;
        }
      }

      ref.add({name: 'langid', value: language});
    }

    ref.add({name: ref.has('note') ? 'annotation' : 'note', value: item.extra});

    ref.add({name: 'keywords', value: item.tags, esc: 'tags'});

    if (item.notes && Translator.exportNotes) {
      for_each (let note in item.notes) {
        ref.add({name: 'annotation', value: Zotero.Utilities.unescapeHTML(note.note)});
      }
    }

    ref.add({name: 'file', value:item.attachments, esc: 'attachments'});

    ref.complete();
  }

  Translator.exportGroups();

  Zotero.write("\n");
}
