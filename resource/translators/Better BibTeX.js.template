{
	"translatorID": "ca65189f-8815-4afe-8c8b-8c7c15f0edca",
	"label": "Better BibTeX",
	"creator": "Simon Kornblith, Richard Karnesky and Emiliano heyns",
	"target": "bib",
	"minVersion": "2.1.9",
	"maxVersion": "",
	"priority": 100,
	"displayOptions": {
		"exportNotes": true,
		"exportFileData": false,
		"useJournalAbbreviation": false
	},
	"inRepository": true,
	"translatorType": 2,
	"browserSupport": "gcsv",
	"lastUpdated": "/*= timestamp =*/"
}

var fieldMap = {
  address:"place",
  chapter:"section",
  edition:"edition",
  type:"type",
  series:"series",
  title:"title",
  volume:"volume",
  copyright:"rights",
  isbn:"ISBN",
  issn:"ISSN",
  lccn:"callNumber",
  shorttitle:"shortTitle",
  url:"url",
  doi:"DOI",
  abstract:"abstractNote",
  nationality: "country",
  language:"language",
  assignee:"assignee"
};

var zotero2tex = {
  book:             ['book', 'booklet', 'manual', 'proceedings'],
  bookSection:      ['incollection', 'inbook'],
  journalArticle:   [':article', ':misc'],
  magazineArticle:  'article',
  newspaperArticle: 'article',
  thesis:           ['phdthesis', 'mastersthesis'],
  manuscript:       'unpublished',
  patent:           'patent',
  conferencePaper:  ['inproceedings', 'conference'],
  report:           'techreport',
  letter:           'misc',
  interview:        'misc',
  film:             'misc',
  artwork:          'misc',
  webpage:          'misc'
};

/*= render BibTeX.js =*/

function doExport() {
  //Zotero.write("% BibTeX export generated by Zotero "+Zotero.Utilities.getVersion());
  // to make sure the BOM gets ignored
  trLog('doBibTexExport');
  Zotero.write("\n");

  var first = true;
  CiteKeys.initialize().forEach(function(item) {
    //don't export standalone notes and attachments
    if(item.itemType == "note" || item.itemType == "attachment") return;

    // determine type
    var type = getBibTexType(item);

    if (!first) { Zotero.write(",\n\n"); }
    first = false;

    Zotero.write("% better-bibtex: " + (CiteKeys.items[item.itemID].pinned ?  'pinned' : 'generated') + "\n");
    if (CiteKeys.items[item.itemID].duplicates) {
      Zotero.write("% better-bibtex: " + (CiteKeys.items[item.itemID].pinned ?  'hard' : 'soft') + " conflict");
      if (CiteKeys.items[item.itemID].default && CiteKeys.items[item.itemID].default != CiteKeys.items[item.itemID].key) {
        Zotero.write(" with " + CiteKeys.items[item.itemID].default);
      }
      Zotero.write("\n");
    }
    Zotero.write("@"+type+"{"+CiteKeys.items[item.itemID].key);

    var value;
    for(var field in fieldMap) {
      if(item[fieldMap[field]]) {
        value = item[fieldMap[field]];
        if (field == 'url') {
          writeField(field, escape_url(value));
        } else {
          writeField(field, escape(value));
        }
      }
    }

    if(item.reportNumber || item.issue || item.seriesNumber || item.patentNumber) {
      writeField("number", escape(item.reportNumber || item.issue || item.seriesNumber|| item.patentNumber));
    }

    if (item.accessDate){
      var accessYMD = item.accessDate.replace(/\s*\d+:\d+:\d+/, "");
      writeField("urldate", escape(accessYMD));
    }

    if(item.publicationTitle) {
      if(item.itemType == "bookSection" || item.itemType == "conferencePaper") {
        writeField("booktitle", escape({literal: item.publicationTitle}));
      } else if(Zotero.getOption("useJournalAbbreviation") && item.journalAbbreviation){
        writeField('journal', escape({literal:item.journalAbbreviation}));
      } else {
        writeField("journal", escape({literal:item.publicationTitle}));
      }
    }

    if(item.publisher) {
      if(item.itemType == "thesis") {
        writeField("school", escape({literal:item.publisher}));
      } else if(item.itemType =="report") {
        writeField("institution", escape({literal:item.publisher}));
      } else {
        writeField("publisher", escape({literal:item.publisher}));
      }
    }

    if(item.creators && item.creators.length) {
      // split creators into subcategories
      var authors = [];
      var editors = [];
      var translators = [];
      var collaborators = [];
      var primaryCreatorType = Zotero.Utilities.getCreatorsForType(item.itemType)[0];
      var creator;

      item.creators.forEach(function(creator) {
        if (('' + creator.firstName).trim() != '' && ('' + creator.lastName).trim() != '') {
          creatorString = creator.lastName + ", " + creator.firstName;
        } else {
          creatorString = {literal: creator.lastName}
        }


        switch (creator.creatorType) {
          case 'editor':
          case 'seriesEditor':
            editors.push(creatorString);
            break;
          case 'translator':
            translators.push(creatorString);
          case primaryCreatorType:
            authors.push(creatorString);
            break;
          default:
            collaborators.push(creatorString);
        }
      });

      writeField('author', escape(authors, ' and '));
      writeField('editor', escape(editors, ' and '));
      writeField('translator', escape(translators, ' and '));
      writeField('collaborator', escape(collaborators, ' and '));
    }

    if(item.date) {
      var date = Zotero.Utilities.strToDate(item.date);
      if (typeof date.year === 'undefined') {
        writeField("year", escape({literal:item.date}));
      } else {
        // need to use non-localized abbreviation
        if(typeof date.month == "number") {
          writeField("month", escape(months[date.month]), true);
        }
        writeField("year", escape(date.year));
      }
    }

    writeField("note", escape(item.extra));

    writeField("keywords", escape(item.tags.collect(function(tag) { return tag.tag; }) , ', '));

    writeField("pages", escape(item.pages));

    // Commented out, because we don't want a books number of pages in the BibTeX "pages" field for books.
    //if(item.numPages) {
    //  writeField("pages", escape(item.numPages));
    //}

    /* We'll prefer url over howpublished see
    https://forums.zotero.org/discussion/24554/bibtex-doubled-url/#Comment_157802

    if(item.itemType == "webpage") {
      writeField("howpublished", item.url);
    }*/
    if (item.notes && Zotero.getOption("exportNotes")) {
      item.notes.forEach(function(note) {
        writeField("annote", escape(Zotero.Utilities.unescapeHTML(note["note"])));
      });
    }

    writeField("file", saveAttachments(item));

    Zotero.write("\n}");
  });
}

var exports = {
	"doExport": doExport,
	"setKeywordDelimRe": setKeywordDelimRe,
	"setKeywordSplitOnSpace": setKeywordSplitOnSpace
}

/*= render testcases.js =*/
